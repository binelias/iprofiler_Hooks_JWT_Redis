{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uriToString = exports.splitHostPort = exports.parseUri = void 0;\n/*\n * The groups correspond to URI parts as follows:\n * 1. scheme\n * 2. authority\n * 3. path\n */\n\nconst URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\n\nfunction parseUri(uriString) {\n  const parsedUri = URI_REGEX.exec(uriString);\n\n  if (parsedUri === null) {\n    return null;\n  }\n\n  return {\n    scheme: parsedUri[1],\n    authority: parsedUri[2],\n    path: parsedUri[3]\n  };\n}\n\nexports.parseUri = parseUri;\nconst NUMBER_REGEX = /^\\d+$/;\n\nfunction splitHostPort(path) {\n  if (path.startsWith('[')) {\n    const hostEnd = path.indexOf(']');\n\n    if (hostEnd === -1) {\n      return null;\n    }\n\n    const host = path.substring(1, hostEnd);\n    /* Only an IPv6 address should be in bracketed notation, and an IPv6\n     * address should have at least one colon */\n\n    if (host.indexOf(':') === -1) {\n      return null;\n    }\n\n    if (path.length > hostEnd + 1) {\n      if (path[hostEnd + 1] === ':') {\n        const portString = path.substring(hostEnd + 2);\n\n        if (NUMBER_REGEX.test(portString)) {\n          return {\n            host: host,\n            port: +portString\n          };\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else {\n      return {\n        host\n      };\n    }\n  } else {\n    const splitPath = path.split(':');\n    /* Exactly one colon means that this is host:port. Zero colons means that\n     * there is no port. And multiple colons means that this is a bare IPv6\n     * address with no port */\n\n    if (splitPath.length === 2) {\n      if (NUMBER_REGEX.test(splitPath[1])) {\n        return {\n          host: splitPath[0],\n          port: +splitPath[1]\n        };\n      } else {\n        return null;\n      }\n    } else {\n      return {\n        host: path\n      };\n    }\n  }\n}\n\nexports.splitHostPort = splitHostPort;\n\nfunction uriToString(uri) {\n  let result = '';\n\n  if (uri.scheme !== undefined) {\n    result += uri.scheme + ':';\n  }\n\n  if (uri.authority !== undefined) {\n    result += '//' + uri.authority + '/';\n  }\n\n  result += uri.path;\n  return result;\n}\n\nexports.uriToString = uriToString;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;AAMA,MAAMA,SAAS,GAAG,iDAAlB;;AAEA,SAAgBC,QAAhB,CAAyBC,SAAzB,EAA0C;EACxC,MAAMC,SAAS,GAAGH,SAAS,CAACI,IAAV,CAAeF,SAAf,CAAlB;;EACA,IAAIC,SAAS,KAAK,IAAlB,EAAwB;IACtB,OAAO,IAAP;EACD;;EACD,OAAO;IACLE,MAAM,EAAEF,SAAS,CAAC,CAAD,CADZ;IAELG,SAAS,EAAEH,SAAS,CAAC,CAAD,CAFf;IAGLI,IAAI,EAAEJ,SAAS,CAAC,CAAD;EAHV,CAAP;AAKD;;AAVDK;AAiBA,MAAMC,YAAY,GAAG,OAArB;;AAEA,SAAgBC,aAAhB,CAA8BH,IAA9B,EAA0C;EACxC,IAAIA,IAAI,CAACI,UAAL,CAAgB,GAAhB,CAAJ,EAA0B;IACxB,MAAMC,OAAO,GAAGL,IAAI,CAACM,OAAL,CAAa,GAAb,CAAhB;;IACA,IAAID,OAAO,KAAK,CAAC,CAAjB,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,MAAME,IAAI,GAAGP,IAAI,CAACQ,SAAL,CAAe,CAAf,EAAkBH,OAAlB,CAAb;IACA;;;IAEA,IAAIE,IAAI,CAACD,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;MAC5B,OAAO,IAAP;IACD;;IACD,IAAIN,IAAI,CAACS,MAAL,GAAcJ,OAAO,GAAG,CAA5B,EAA+B;MAC7B,IAAIL,IAAI,CAACK,OAAO,GAAG,CAAX,CAAJ,KAAsB,GAA1B,EAA+B;QAC7B,MAAMK,UAAU,GAAGV,IAAI,CAACQ,SAAL,CAAeH,OAAO,GAAG,CAAzB,CAAnB;;QACA,IAAIH,YAAY,CAACS,IAAb,CAAkBD,UAAlB,CAAJ,EAAmC;UACjC,OAAO;YACLH,IAAI,EAAEA,IADD;YAELK,IAAI,EAAE,CAACF;UAFF,CAAP;QAID,CALD,MAKO;UACL,OAAO,IAAP;QACD;MACF,CAVD,MAUO;QACL,OAAO,IAAP;MACD;IACF,CAdD,MAcO;MACL,OAAO;QACLH;MADK,CAAP;IAGD;EACF,CA9BD,MA8BO;IACL,MAAMM,SAAS,GAAGb,IAAI,CAACc,KAAL,CAAW,GAAX,CAAlB;IACA;;;;IAGA,IAAID,SAAS,CAACJ,MAAV,KAAqB,CAAzB,EAA4B;MAC1B,IAAIP,YAAY,CAACS,IAAb,CAAkBE,SAAS,CAAC,CAAD,CAA3B,CAAJ,EAAqC;QACnC,OAAO;UACLN,IAAI,EAAEM,SAAS,CAAC,CAAD,CADV;UAELD,IAAI,EAAE,CAACC,SAAS,CAAC,CAAD;QAFX,CAAP;MAID,CALD,MAKO;QACL,OAAO,IAAP;MACD;IACF,CATD,MASO;MACL,OAAO;QACLN,IAAI,EAAEP;MADD,CAAP;IAGD;EACF;AACF;;AAnDDC;;AAqDA,SAAgBc,WAAhB,CAA4BC,GAA5B,EAAwC;EACtC,IAAIC,MAAM,GAAG,EAAb;;EACA,IAAID,GAAG,CAAClB,MAAJ,KAAeoB,SAAnB,EAA8B;IAC5BD,MAAM,IAAID,GAAG,CAAClB,MAAJ,GAAa,GAAvB;EACD;;EACD,IAAIkB,GAAG,CAACjB,SAAJ,KAAkBmB,SAAtB,EAAiC;IAC/BD,MAAM,IAAI,OAAOD,GAAG,CAACjB,SAAX,GAAuB,GAAjC;EACD;;EACDkB,MAAM,IAAID,GAAG,CAAChB,IAAd;EACA,OAAOiB,MAAP;AACD;;AAVDhB","names":["URI_REGEX","parseUri","uriString","parsedUri","exec","scheme","authority","path","exports","NUMBER_REGEX","splitHostPort","startsWith","hostEnd","indexOf","host","substring","length","portString","test","port","splitPath","split","uriToString","uri","result","undefined"],"sources":["C:\\Users\\binel\\OneDrive\\Desktop\\Today\\Udemy\\iProfiler\\iProfiler\\iprofiler\\node_modules\\@grpc\\grpc-js\\src\\uri-parser.ts"],"sourcesContent":["/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nexport interface GrpcUri {\n  scheme?: string;\n  authority?: string;\n  path: string;\n}\n\n/*\n * The groups correspond to URI parts as follows:\n * 1. scheme\n * 2. authority\n * 3. path\n */\nconst URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\n\nexport function parseUri(uriString: string): GrpcUri | null {\n  const parsedUri = URI_REGEX.exec(uriString);\n  if (parsedUri === null) {\n    return null;\n  }\n  return {\n    scheme: parsedUri[1],\n    authority: parsedUri[2],\n    path: parsedUri[3],\n  };\n}\n\nexport interface HostPort {\n  host: string;\n  port?: number;\n}\n\nconst NUMBER_REGEX = /^\\d+$/;\n\nexport function splitHostPort(path: string): HostPort | null {\n  if (path.startsWith('[')) {\n    const hostEnd = path.indexOf(']');\n    if (hostEnd === -1) {\n      return null;\n    }\n    const host = path.substring(1, hostEnd);\n    /* Only an IPv6 address should be in bracketed notation, and an IPv6\n     * address should have at least one colon */\n    if (host.indexOf(':') === -1) {\n      return null;\n    }\n    if (path.length > hostEnd + 1) {\n      if (path[hostEnd + 1] === ':') {\n        const portString = path.substring(hostEnd + 2);\n        if (NUMBER_REGEX.test(portString)) {\n          return {\n            host: host,\n            port: +portString,\n          };\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else {\n      return {\n        host,\n      };\n    }\n  } else {\n    const splitPath = path.split(':');\n    /* Exactly one colon means that this is host:port. Zero colons means that\n     * there is no port. And multiple colons means that this is a bare IPv6\n     * address with no port */\n    if (splitPath.length === 2) {\n      if (NUMBER_REGEX.test(splitPath[1])) {\n        return {\n          host: splitPath[0],\n          port: +splitPath[1],\n        };\n      } else {\n        return null;\n      }\n    } else {\n      return {\n        host: path,\n      };\n    }\n  }\n}\n\nexport function uriToString(uri: GrpcUri): string {\n  let result = '';\n  if (uri.scheme !== undefined) {\n    result += uri.scheme + ':';\n  }\n  if (uri.authority !== undefined) {\n    result += '//' + uri.authority + '/';\n  }\n  result += uri.path;\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}