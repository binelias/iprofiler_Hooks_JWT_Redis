{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar _a, _b, _c, _d;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTracerEnabled = exports.trace = exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\n\nconst constants_1 = require(\"./constants\");\n\nconst DEFAULT_LOGGER = {\n  error: function (message) {\n    for (var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      optionalParams[_key - 1] = arguments[_key];\n    }\n\n    console.error('E ' + message, ...optionalParams);\n  },\n  info: function (message) {\n    for (var _len2 = arguments.length, optionalParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      optionalParams[_key2 - 1] = arguments[_key2];\n    }\n\n    console.error('I ' + message, ...optionalParams);\n  },\n  debug: function (message) {\n    for (var _len3 = arguments.length, optionalParams = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      optionalParams[_key3 - 1] = arguments[_key3];\n    }\n\n    console.error('D ' + message, ...optionalParams);\n  }\n};\nlet _logger = DEFAULT_LOGGER;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';\n\nswitch (verbosityString.toUpperCase()) {\n  case 'DEBUG':\n    _logVerbosity = constants_1.LogVerbosity.DEBUG;\n    break;\n\n  case 'INFO':\n    _logVerbosity = constants_1.LogVerbosity.INFO;\n    break;\n\n  case 'ERROR':\n    _logVerbosity = constants_1.LogVerbosity.ERROR;\n    break;\n\n  case 'NONE':\n    _logVerbosity = constants_1.LogVerbosity.NONE;\n    break;\n\n  default: // Ignore any other values\n\n}\n\nexports.getLogger = () => {\n  return _logger;\n};\n\nexports.setLogger = logger => {\n  _logger = logger;\n};\n\nexports.setLoggerVerbosity = verbosity => {\n  _logVerbosity = verbosity;\n}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nexports.log = function (severity) {\n  let logFunction;\n\n  if (severity >= _logVerbosity) {\n    switch (severity) {\n      case constants_1.LogVerbosity.DEBUG:\n        logFunction = _logger.debug;\n        break;\n\n      case constants_1.LogVerbosity.INFO:\n        logFunction = _logger.info;\n        break;\n\n      case constants_1.LogVerbosity.ERROR:\n        logFunction = _logger.error;\n        break;\n    }\n    /* Fall back to _logger.error when other methods are not available for\n     * compatiblity with older behavior that always logged to _logger.error */\n\n\n    if (!logFunction) {\n      logFunction = _logger.error;\n    }\n\n    if (logFunction) {\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n\n      logFunction.bind(_logger)(...args);\n    }\n  }\n};\n\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';\nconst enabledTracers = new Set();\nconst disabledTracers = new Set();\n\nfor (const tracerName of tracersString.split(',')) {\n  if (tracerName.startsWith('-')) {\n    disabledTracers.add(tracerName.substring(1));\n  } else {\n    enabledTracers.add(tracerName);\n  }\n}\n\nconst allEnabled = enabledTracers.has('all');\n\nfunction trace(severity, tracer, text) {\n  if (isTracerEnabled(tracer)) {\n    exports.log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n  }\n}\n\nexports.trace = trace;\n\nfunction isTracerEnabled(tracer) {\n  return !disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer));\n}\n\nexports.isTracerEnabled = isTracerEnabled;","map":{"version":3,"mappings":"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","names":["DEFAULT_LOGGER","error","message","optionalParams","console","info","debug","_logger","_logVerbosity","constants_1","ERROR","verbosityString","process","env","GRPC_NODE_VERBOSITY","_a","GRPC_VERBOSITY","_b","toUpperCase","DEBUG","INFO","NONE","exports","logger","verbosity","severity","logFunction","args","bind","tracersString","GRPC_NODE_TRACE","_c","GRPC_TRACE","_d","enabledTracers","Set","disabledTracers","tracerName","split","startsWith","add","substring","allEnabled","has","trace","tracer","text","isTracerEnabled","Date","toISOString"],"sources":["C:\\Users\\binel\\OneDrive\\Desktop\\Today\\Udemy\\iProfiler\\iProfiler\\iprofiler\\node_modules\\@grpc\\grpc-js\\src\\logging.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { LogVerbosity } from './constants';\n\nconst DEFAULT_LOGGER: Partial<Console> = {\n  error: (message?: any, ...optionalParams: any[]) => {\n    console.error('E ' + message, ...optionalParams);\n  },\n  info: (message?: any, ...optionalParams: any[]) => {\n    console.error('I ' + message, ...optionalParams);\n  },\n  debug: (message?: any, ...optionalParams: any[]) => {\n    console.error('D ' + message, ...optionalParams);\n  },\n}\n\nlet _logger: Partial<Console> = DEFAULT_LOGGER;\nlet _logVerbosity: LogVerbosity = LogVerbosity.ERROR;\n\nconst verbosityString =\n  process.env.GRPC_NODE_VERBOSITY ?? process.env.GRPC_VERBOSITY ?? '';\n\nswitch (verbosityString.toUpperCase()) {\n  case 'DEBUG':\n    _logVerbosity = LogVerbosity.DEBUG;\n    break;\n  case 'INFO':\n    _logVerbosity = LogVerbosity.INFO;\n    break;\n  case 'ERROR':\n    _logVerbosity = LogVerbosity.ERROR;\n    break;\n  case 'NONE':\n    _logVerbosity = LogVerbosity.NONE;\n    break;\n  default:\n  // Ignore any other values\n}\n\nexport const getLogger = (): Partial<Console> => {\n  return _logger;\n};\n\nexport const setLogger = (logger: Partial<Console>): void => {\n  _logger = logger;\n};\n\nexport const setLoggerVerbosity = (verbosity: LogVerbosity): void => {\n  _logVerbosity = verbosity;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const log = (severity: LogVerbosity, ...args: any[]): void => {\n  let logFunction: typeof DEFAULT_LOGGER.error;\n  if (severity >= _logVerbosity) {\n    switch (severity) {\n      case LogVerbosity.DEBUG:\n        logFunction = _logger.debug;\n        break;\n      case LogVerbosity.INFO:\n        logFunction = _logger.info;\n        break;\n      case LogVerbosity.ERROR:\n        logFunction = _logger.error;\n        break;\n    }\n    /* Fall back to _logger.error when other methods are not available for\n     * compatiblity with older behavior that always logged to _logger.error */\n    if (!logFunction) {\n      logFunction = _logger.error;\n    }\n    if (logFunction) {\n      logFunction.bind(_logger)(...args);\n    }\n  }\n};\n\nconst tracersString =\n  process.env.GRPC_NODE_TRACE ?? process.env.GRPC_TRACE ?? '';\nconst enabledTracers = new Set<string>();\nconst disabledTracers = new Set<string>();\nfor (const tracerName of tracersString.split(',')) {\n  if (tracerName.startsWith('-')) {\n    disabledTracers.add(tracerName.substring(1));\n  } else {\n    enabledTracers.add(tracerName);\n  }\n}\nconst allEnabled = enabledTracers.has('all');\n\nexport function trace(\n  severity: LogVerbosity,\n  tracer: string,\n  text: string\n): void {\n  if (isTracerEnabled(tracer)) {\n    log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n  }\n}\n\nexport function isTracerEnabled(tracer: string): boolean {\n  return !disabledTracers.has(tracer) &&\n    (allEnabled || enabledTracers.has(tracer));\n}\n"]},"metadata":{},"sourceType":"script"}