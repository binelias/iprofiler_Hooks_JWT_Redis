{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompressionFilterFactory = exports.CompressionFilter = void 0;\n\nconst zlib = require(\"zlib\");\n\nconst compression_algorithms_1 = require(\"./compression-algorithms\");\n\nconst constants_1 = require(\"./constants\");\n\nconst filter_1 = require(\"./filter\");\n\nconst logging = require(\"./logging\");\n\nconst isCompressionAlgorithmKey = key => {\n  return typeof key === 'number' && typeof compression_algorithms_1.CompressionAlgorithms[key] === 'string';\n};\n\nclass CompressionHandler {\n  /**\n   * @param message Raw uncompressed message bytes\n   * @param compress Indicates whether the message should be compressed\n   * @return Framed message, compressed if applicable\n   */\n  async writeMessage(message, compress) {\n    let messageBuffer = message;\n\n    if (compress) {\n      messageBuffer = await this.compressMessage(messageBuffer);\n    }\n\n    const output = Buffer.allocUnsafe(messageBuffer.length + 5);\n    output.writeUInt8(compress ? 1 : 0, 0);\n    output.writeUInt32BE(messageBuffer.length, 1);\n    messageBuffer.copy(output, 5);\n    return output;\n  }\n  /**\n   * @param data Framed message, possibly compressed\n   * @return Uncompressed message\n   */\n\n\n  async readMessage(data) {\n    const compressed = data.readUInt8(0) === 1;\n    let messageBuffer = data.slice(5);\n\n    if (compressed) {\n      messageBuffer = await this.decompressMessage(messageBuffer);\n    }\n\n    return messageBuffer;\n  }\n\n}\n\nclass IdentityHandler extends CompressionHandler {\n  async compressMessage(message) {\n    return message;\n  }\n\n  async writeMessage(message, compress) {\n    const output = Buffer.allocUnsafe(message.length + 5);\n    /* With \"identity\" compression, messages should always be marked as\n     * uncompressed */\n\n    output.writeUInt8(0, 0);\n    output.writeUInt32BE(message.length, 1);\n    message.copy(output, 5);\n    return output;\n  }\n\n  decompressMessage(message) {\n    return Promise.reject(new Error('Received compressed message but \"grpc-encoding\" header was identity'));\n  }\n\n}\n\nclass DeflateHandler extends CompressionHandler {\n  compressMessage(message) {\n    return new Promise((resolve, reject) => {\n      zlib.deflate(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n\n  decompressMessage(message) {\n    return new Promise((resolve, reject) => {\n      zlib.inflate(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n\n}\n\nclass GzipHandler extends CompressionHandler {\n  compressMessage(message) {\n    return new Promise((resolve, reject) => {\n      zlib.gzip(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n\n  decompressMessage(message) {\n    return new Promise((resolve, reject) => {\n      zlib.unzip(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n\n}\n\nclass UnknownHandler extends CompressionHandler {\n  constructor(compressionName) {\n    super();\n    this.compressionName = compressionName;\n  }\n\n  compressMessage(message) {\n    return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));\n  }\n\n  decompressMessage(message) {\n    // This should be unreachable\n    return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));\n  }\n\n}\n\nfunction getCompressionHandler(compressionName) {\n  switch (compressionName) {\n    case 'identity':\n      return new IdentityHandler();\n\n    case 'deflate':\n      return new DeflateHandler();\n\n    case 'gzip':\n      return new GzipHandler();\n\n    default:\n      return new UnknownHandler(compressionName);\n  }\n}\n\nclass CompressionFilter extends filter_1.BaseFilter {\n  constructor(channelOptions, sharedFilterConfig) {\n    var _a;\n\n    super();\n    this.sharedFilterConfig = sharedFilterConfig;\n    this.sendCompression = new IdentityHandler();\n    this.receiveCompression = new IdentityHandler();\n    this.currentCompressionAlgorithm = 'identity';\n    const compressionAlgorithmKey = channelOptions['grpc.default_compression_algorithm'];\n\n    if (compressionAlgorithmKey !== undefined) {\n      if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {\n        const clientSelectedEncoding = compression_algorithms_1.CompressionAlgorithms[compressionAlgorithmKey];\n        const serverSupportedEncodings = (_a = sharedFilterConfig.serverSupportedEncodingHeader) === null || _a === void 0 ? void 0 : _a.split(',');\n        /**\n         * There are two possible situations here:\n         * 1) We don't have any info yet from the server about what compression it supports\n         *    In that case we should just use what the client tells us to use\n         * 2) We've previously received a response from the server including a grpc-accept-encoding header\n         *    In that case we only want to use the encoding chosen by the client if the server supports it\n         */\n\n        if (!serverSupportedEncodings || serverSupportedEncodings.includes(clientSelectedEncoding)) {\n          this.currentCompressionAlgorithm = clientSelectedEncoding;\n          this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm);\n        }\n      } else {\n        logging.log(constants_1.LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);\n      }\n    }\n  }\n\n  async sendMetadata(metadata) {\n    const headers = await metadata;\n    headers.set('grpc-accept-encoding', 'identity,deflate,gzip');\n    headers.set('accept-encoding', 'identity'); // No need to send the header if it's \"identity\" -  behavior is identical; save the bandwidth\n\n    if (this.currentCompressionAlgorithm === 'identity') {\n      headers.remove('grpc-encoding');\n    } else {\n      headers.set('grpc-encoding', this.currentCompressionAlgorithm);\n    }\n\n    return headers;\n  }\n\n  receiveMetadata(metadata) {\n    const receiveEncoding = metadata.get('grpc-encoding');\n\n    if (receiveEncoding.length > 0) {\n      const encoding = receiveEncoding[0];\n\n      if (typeof encoding === 'string') {\n        this.receiveCompression = getCompressionHandler(encoding);\n      }\n    }\n\n    metadata.remove('grpc-encoding');\n    /* Check to see if the compression we're using to send messages is supported by the server\n     * If not, reset the sendCompression filter and have it use the default IdentityHandler */\n\n    const serverSupportedEncodingsHeader = metadata.get('grpc-accept-encoding')[0];\n\n    if (serverSupportedEncodingsHeader) {\n      this.sharedFilterConfig.serverSupportedEncodingHeader = serverSupportedEncodingsHeader;\n      const serverSupportedEncodings = serverSupportedEncodingsHeader.split(',');\n\n      if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {\n        this.sendCompression = new IdentityHandler();\n        this.currentCompressionAlgorithm = 'identity';\n      }\n    }\n\n    metadata.remove('grpc-accept-encoding');\n    return metadata;\n  }\n\n  async sendMessage(message) {\n    var _a;\n    /* This filter is special. The input message is the bare message bytes,\n     * and the output is a framed and possibly compressed message. For this\n     * reason, this filter should be at the bottom of the filter stack */\n\n\n    const resolvedMessage = await message;\n    let compress;\n\n    if (this.sendCompression instanceof IdentityHandler) {\n      compress = false;\n    } else {\n      compress = (((_a = resolvedMessage.flags) !== null && _a !== void 0 ? _a : 0) & 2\n      /* NoCompress */\n      ) === 0;\n    }\n\n    return {\n      message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),\n      flags: resolvedMessage.flags\n    };\n  }\n\n  async receiveMessage(message) {\n    /* This filter is also special. The input message is framed and possibly\n     * compressed, and the output message is deframed and uncompressed. So\n     * this is another reason that this filter should be at the bottom of the\n     * filter stack. */\n    return this.receiveCompression.readMessage(await message);\n  }\n\n}\n\nexports.CompressionFilter = CompressionFilter;\n\nclass CompressionFilterFactory {\n  constructor(channel, options) {\n    this.channel = channel;\n    this.options = options;\n    this.sharedFilterConfig = {};\n  }\n\n  createFilter(callStream) {\n    return new CompressionFilter(this.options, this.sharedFilterConfig);\n  }\n\n}\n\nexports.CompressionFilterFactory = CompressionFilterFactory;","map":{"version":3,"mappings":"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","names":["isCompressionAlgorithmKey","key","compression_algorithms_1","CompressionHandler","writeMessage","message","compress","messageBuffer","compressMessage","output","Buffer","allocUnsafe","length","writeUInt8","writeUInt32BE","copy","readMessage","data","compressed","readUInt8","slice","decompressMessage","IdentityHandler","Promise","reject","Error","DeflateHandler","resolve","zlib","deflate","err","inflate","GzipHandler","gzip","unzip","UnknownHandler","constructor","compressionName","getCompressionHandler","CompressionFilter","filter_1","channelOptions","sharedFilterConfig","compressionAlgorithmKey","undefined","clientSelectedEncoding","serverSupportedEncodings","serverSupportedEncodingHeader","_a","split","includes","currentCompressionAlgorithm","sendCompression","logging","log","constants_1","ERROR","sendMetadata","metadata","headers","set","remove","receiveMetadata","receiveEncoding","get","encoding","receiveCompression","serverSupportedEncodingsHeader","sendMessage","resolvedMessage","flags","receiveMessage","exports","CompressionFilterFactory","channel","options","createFilter","callStream"],"sources":["C:\\Users\\binel\\OneDrive\\Desktop\\Today\\Udemy\\iProfiler\\iProfiler\\iprofiler\\node_modules\\@grpc\\grpc-js\\src\\compression-filter.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport * as zlib from 'zlib';\n\nimport { Call, WriteObject, WriteFlags } from './call-stream';\nimport { Channel } from './channel';\nimport { ChannelOptions } from './channel-options';\nimport { CompressionAlgorithms } from './compression-algorithms';\nimport { LogVerbosity } from './constants';\nimport { BaseFilter, Filter, FilterFactory } from './filter';\nimport * as logging from './logging';\nimport { Metadata, MetadataValue } from './metadata';\n\nconst isCompressionAlgorithmKey = (key: number): key is CompressionAlgorithms => {\n  return typeof key === 'number' && typeof CompressionAlgorithms[key] === 'string';\n}\n\ntype CompressionAlgorithm = keyof typeof CompressionAlgorithms;\n\ntype SharedCompressionFilterConfig = {\n  serverSupportedEncodingHeader?: string;\n};\n\nabstract class CompressionHandler {\n  protected abstract compressMessage(message: Buffer): Promise<Buffer>;\n  protected abstract decompressMessage(data: Buffer): Promise<Buffer>;\n  /**\n   * @param message Raw uncompressed message bytes\n   * @param compress Indicates whether the message should be compressed\n   * @return Framed message, compressed if applicable\n   */\n  async writeMessage(message: Buffer, compress: boolean): Promise<Buffer> {\n    let messageBuffer = message;\n    if (compress) {\n      messageBuffer = await this.compressMessage(messageBuffer);\n    }\n    const output = Buffer.allocUnsafe(messageBuffer.length + 5);\n    output.writeUInt8(compress ? 1 : 0, 0);\n    output.writeUInt32BE(messageBuffer.length, 1);\n    messageBuffer.copy(output, 5);\n    return output;\n  }\n  /**\n   * @param data Framed message, possibly compressed\n   * @return Uncompressed message\n   */\n  async readMessage(data: Buffer): Promise<Buffer> {\n    const compressed = data.readUInt8(0) === 1;\n    let messageBuffer = data.slice(5);\n    if (compressed) {\n      messageBuffer = await this.decompressMessage(messageBuffer);\n    }\n    return messageBuffer;\n  }\n}\n\nclass IdentityHandler extends CompressionHandler {\n  async compressMessage(message: Buffer) {\n    return message;\n  }\n\n  async writeMessage(message: Buffer, compress: boolean): Promise<Buffer> {\n    const output = Buffer.allocUnsafe(message.length + 5);\n    /* With \"identity\" compression, messages should always be marked as\n     * uncompressed */\n    output.writeUInt8(0, 0);\n    output.writeUInt32BE(message.length, 1);\n    message.copy(output, 5);\n    return output;\n  }\n\n  decompressMessage(message: Buffer): Promise<Buffer> {\n    return Promise.reject<Buffer>(\n      new Error(\n        'Received compressed message but \"grpc-encoding\" header was identity'\n      )\n    );\n  }\n}\n\nclass DeflateHandler extends CompressionHandler {\n  compressMessage(message: Buffer) {\n    return new Promise<Buffer>((resolve, reject) => {\n      zlib.deflate(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n\n  decompressMessage(message: Buffer) {\n    return new Promise<Buffer>((resolve, reject) => {\n      zlib.inflate(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n}\n\nclass GzipHandler extends CompressionHandler {\n  compressMessage(message: Buffer) {\n    return new Promise<Buffer>((resolve, reject) => {\n      zlib.gzip(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n\n  decompressMessage(message: Buffer) {\n    return new Promise<Buffer>((resolve, reject) => {\n      zlib.unzip(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n}\n\nclass UnknownHandler extends CompressionHandler {\n  constructor(private readonly compressionName: string) {\n    super();\n  }\n  compressMessage(message: Buffer): Promise<Buffer> {\n    return Promise.reject<Buffer>(\n      new Error(\n        `Received message compressed with unsupported compression method ${this.compressionName}`\n      )\n    );\n  }\n\n  decompressMessage(message: Buffer): Promise<Buffer> {\n    // This should be unreachable\n    return Promise.reject<Buffer>(\n      new Error(`Compression method not supported: ${this.compressionName}`)\n    );\n  }\n}\n\nfunction getCompressionHandler(compressionName: string): CompressionHandler {\n  switch (compressionName) {\n    case 'identity':\n      return new IdentityHandler();\n    case 'deflate':\n      return new DeflateHandler();\n    case 'gzip':\n      return new GzipHandler();\n    default:\n      return new UnknownHandler(compressionName);\n  }\n}\n\nexport class CompressionFilter extends BaseFilter implements Filter {\n  private sendCompression: CompressionHandler = new IdentityHandler();\n  private receiveCompression: CompressionHandler = new IdentityHandler();\n  private currentCompressionAlgorithm: CompressionAlgorithm = 'identity';\n\n  constructor(channelOptions: ChannelOptions, private sharedFilterConfig: SharedCompressionFilterConfig) {\n    super();\n\n    const compressionAlgorithmKey = channelOptions['grpc.default_compression_algorithm'];\n    if (compressionAlgorithmKey !== undefined) {\n      if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {\n        const clientSelectedEncoding = CompressionAlgorithms[compressionAlgorithmKey] as CompressionAlgorithm;\n        const serverSupportedEncodings = sharedFilterConfig.serverSupportedEncodingHeader?.split(',');\n        /**\n         * There are two possible situations here:\n         * 1) We don't have any info yet from the server about what compression it supports\n         *    In that case we should just use what the client tells us to use\n         * 2) We've previously received a response from the server including a grpc-accept-encoding header\n         *    In that case we only want to use the encoding chosen by the client if the server supports it\n         */\n        if (!serverSupportedEncodings || serverSupportedEncodings.includes(clientSelectedEncoding)) {\n          this.currentCompressionAlgorithm = clientSelectedEncoding;\n          this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm);\n        }\n      } else {\n        logging.log(LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);\n      }\n    }\n  }\n\n  async sendMetadata(metadata: Promise<Metadata>): Promise<Metadata> {\n    const headers: Metadata = await metadata;\n    headers.set('grpc-accept-encoding', 'identity,deflate,gzip');\n    headers.set('accept-encoding', 'identity');\n\n    // No need to send the header if it's \"identity\" -  behavior is identical; save the bandwidth\n    if (this.currentCompressionAlgorithm === 'identity') {\n      headers.remove('grpc-encoding');\n    } else {\n      headers.set('grpc-encoding', this.currentCompressionAlgorithm);\n    }\n\n    return headers;\n  }\n\n  receiveMetadata(metadata: Metadata): Metadata {\n    const receiveEncoding: MetadataValue[] = metadata.get('grpc-encoding');\n    if (receiveEncoding.length > 0) {\n      const encoding: MetadataValue = receiveEncoding[0];\n      if (typeof encoding === 'string') {\n        this.receiveCompression = getCompressionHandler(encoding);\n      }\n    }\n    metadata.remove('grpc-encoding');\n\n    /* Check to see if the compression we're using to send messages is supported by the server\n     * If not, reset the sendCompression filter and have it use the default IdentityHandler */\n    const serverSupportedEncodingsHeader = metadata.get('grpc-accept-encoding')[0] as string | undefined;\n    if (serverSupportedEncodingsHeader) {\n      this.sharedFilterConfig.serverSupportedEncodingHeader = serverSupportedEncodingsHeader;\n      const serverSupportedEncodings = serverSupportedEncodingsHeader.split(',');\n\n      if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {\n        this.sendCompression = new IdentityHandler();\n        this.currentCompressionAlgorithm = 'identity';\n      }\n    }\n    metadata.remove('grpc-accept-encoding');\n    return metadata;\n  }\n\n  async sendMessage(message: Promise<WriteObject>): Promise<WriteObject> {\n    /* This filter is special. The input message is the bare message bytes,\n     * and the output is a framed and possibly compressed message. For this\n     * reason, this filter should be at the bottom of the filter stack */\n    const resolvedMessage: WriteObject = await message;\n    let compress: boolean;\n    if (this.sendCompression instanceof IdentityHandler) {\n      compress = false;\n    } else {\n      compress = ((resolvedMessage.flags ?? 0) & WriteFlags.NoCompress) === 0;\n    }\n\n    return {\n      message: await this.sendCompression.writeMessage(\n        resolvedMessage.message,\n        compress\n      ),\n      flags: resolvedMessage.flags,\n    };\n  }\n\n  async receiveMessage(message: Promise<Buffer>) {\n    /* This filter is also special. The input message is framed and possibly\n     * compressed, and the output message is deframed and uncompressed. So\n     * this is another reason that this filter should be at the bottom of the\n     * filter stack. */\n    return this.receiveCompression.readMessage(await message);\n  }\n}\n\nexport class CompressionFilterFactory\n  implements FilterFactory<CompressionFilter> {\n    private sharedFilterConfig: SharedCompressionFilterConfig = {};\n  constructor(private readonly channel: Channel, private readonly options: ChannelOptions) {}\n  createFilter(callStream: Call): CompressionFilter {\n    return new CompressionFilter(this.options, this.sharedFilterConfig);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}