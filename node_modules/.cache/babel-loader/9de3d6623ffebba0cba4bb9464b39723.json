{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = void 0;\n\nconst resolver_1 = require(\"./resolver\");\n\nclass UdsResolver {\n  constructor(target, listener, channelOptions) {\n    this.listener = listener;\n    this.addresses = [];\n    let path;\n\n    if (target.authority === '') {\n      path = '/' + target.path;\n    } else {\n      path = target.path;\n    }\n\n    this.addresses = [{\n      path\n    }];\n  }\n\n  updateResolution() {\n    process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null, null, {});\n  }\n\n  destroy() {// This resolver owns no resources, so we do nothing here.\n  }\n\n  static getDefaultAuthority(target) {\n    return 'localhost';\n  }\n\n}\n\nfunction setup() {\n  resolver_1.registerResolver('unix', UdsResolver);\n}\n\nexports.setup = setup;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAgBA;;AAKA,MAAMA,WAAN,CAAiB;EAEfC,YACEC,MADF,EAEUC,QAFV,EAGEC,cAHF,EAGgC;IADtB;IAHF,iBAAiC,EAAjC;IAMN,IAAIC,IAAJ;;IACA,IAAIH,MAAM,CAACI,SAAP,KAAqB,EAAzB,EAA6B;MAC3BD,IAAI,GAAG,MAAMH,MAAM,CAACG,IAApB;IACD,CAFD,MAEO;MACLA,IAAI,GAAGH,MAAM,CAACG,IAAd;IACD;;IACD,KAAKE,SAAL,GAAiB,CAAC;MAAEF;IAAF,CAAD,CAAjB;EACD;;EACDG,gBAAgB;IACdC,OAAO,CAACC,QAAR,CACE,KAAKP,QAAL,CAAcQ,sBADhB,EAEE,KAAKJ,SAFP,EAGE,IAHF,EAIE,IAJF,EAKE,IALF,EAME,EANF;EAQD;;EAEDK,OAAO,IACL;EACD;;EAEyB,OAAnBC,mBAAmB,CAACX,MAAD,EAAgB;IACxC,OAAO,WAAP;EACD;;AAhCc;;AAmCjB,SAAgBY,KAAhB,GAAqB;EACnBC,4BAAiB,MAAjB,EAAyBf,WAAzB;AACD;;AAFDgB","names":["UdsResolver","constructor","target","listener","channelOptions","path","authority","addresses","updateResolution","process","nextTick","onSuccessfulResolution","destroy","getDefaultAuthority","setup","resolver_1","exports"],"sources":["C:\\Users\\binel\\OneDrive\\Desktop\\Today\\Udemy\\iProfiler\\iProfiler\\iprofiler\\node_modules\\@grpc\\grpc-js\\src\\resolver-uds.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Resolver, ResolverListener, registerResolver } from './resolver';\nimport { SubchannelAddress } from './subchannel-address';\nimport { GrpcUri } from './uri-parser';\nimport { ChannelOptions } from './channel-options';\n\nclass UdsResolver implements Resolver {\n  private addresses: SubchannelAddress[] = [];\n  constructor(\n    target: GrpcUri,\n    private listener: ResolverListener,\n    channelOptions: ChannelOptions\n  ) {\n    let path: string;\n    if (target.authority === '') {\n      path = '/' + target.path;\n    } else {\n      path = target.path;\n    }\n    this.addresses = [{ path }];\n  }\n  updateResolution(): void {\n    process.nextTick(\n      this.listener.onSuccessfulResolution,\n      this.addresses,\n      null,\n      null,\n      null,\n      {}\n    );\n  }\n\n  destroy() {\n    // This resolver owns no resources, so we do nothing here.\n  }\n\n  static getDefaultAuthority(target: GrpcUri): string {\n    return 'localhost';\n  }\n}\n\nexport function setup() {\n  registerResolver('unix', UdsResolver);\n}\n"]},"metadata":{},"sourceType":"script"}