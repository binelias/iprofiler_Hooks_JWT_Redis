{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nconst call_1 = require(\"./call\");\n\nconst channel_1 = require(\"./channel\");\n\nconst connectivity_state_1 = require(\"./connectivity-state\");\n\nconst constants_1 = require(\"./constants\");\n\nconst metadata_1 = require(\"./metadata\");\n\nconst client_interceptors_1 = require(\"./client-interceptors\");\n\nconst CHANNEL_SYMBOL = Symbol();\nconst INTERCEPTOR_SYMBOL = Symbol();\nconst INTERCEPTOR_PROVIDER_SYMBOL = Symbol();\nconst CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n/**\n * A generic gRPC client. Primarily useful as a base class for all generated\n * clients.\n */\n\n\nclass Client {\n  constructor(address, credentials) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _a, _b;\n\n    options = Object.assign({}, options);\n    this[INTERCEPTOR_SYMBOL] = (_a = options.interceptors) !== null && _a !== void 0 ? _a : [];\n    delete options.interceptors;\n    this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options.interceptor_providers) !== null && _b !== void 0 ? _b : [];\n    delete options.interceptor_providers;\n\n    if (this[INTERCEPTOR_SYMBOL].length > 0 && this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {\n      throw new Error('Both interceptors and interceptor_providers were passed as options ' + 'to the client constructor. Only one of these is allowed.');\n    }\n\n    this[CALL_INVOCATION_TRANSFORMER_SYMBOL] = options.callInvocationTransformer;\n    delete options.callInvocationTransformer;\n\n    if (options.channelOverride) {\n      this[CHANNEL_SYMBOL] = options.channelOverride;\n    } else if (options.channelFactoryOverride) {\n      const channelFactoryOverride = options.channelFactoryOverride;\n      delete options.channelFactoryOverride;\n      this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options);\n    } else {\n      this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options);\n    }\n  }\n\n  close() {\n    this[CHANNEL_SYMBOL].close();\n  }\n\n  getChannel() {\n    return this[CHANNEL_SYMBOL];\n  }\n\n  waitForReady(deadline, callback) {\n    const checkState = err => {\n      if (err) {\n        callback(new Error('Failed to connect before the deadline'));\n        return;\n      }\n\n      let newState;\n\n      try {\n        newState = this[CHANNEL_SYMBOL].getConnectivityState(true);\n      } catch (e) {\n        callback(new Error('The channel has been closed'));\n        return;\n      }\n\n      if (newState === connectivity_state_1.ConnectivityState.READY) {\n        callback();\n      } else {\n        try {\n          this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);\n        } catch (e) {\n          callback(new Error('The channel has been closed'));\n        }\n      }\n    };\n\n    setImmediate(checkState);\n  }\n\n  checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {\n    if (isFunction(arg1)) {\n      return {\n        metadata: new metadata_1.Metadata(),\n        options: {},\n        callback: arg1\n      };\n    } else if (isFunction(arg2)) {\n      if (arg1 instanceof metadata_1.Metadata) {\n        return {\n          metadata: arg1,\n          options: {},\n          callback: arg2\n        };\n      } else {\n        return {\n          metadata: new metadata_1.Metadata(),\n          options: arg1,\n          callback: arg2\n        };\n      }\n    } else {\n      if (!(arg1 instanceof metadata_1.Metadata && arg2 instanceof Object && isFunction(arg3))) {\n        throw new Error('Incorrect arguments passed');\n      }\n\n      return {\n        metadata: arg1,\n        options: arg2,\n        callback: arg3\n      };\n    }\n  }\n\n  makeUnaryRequest(method, serialize, deserialize, argument, metadata, options, callback) {\n    var _a, _b;\n\n    const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\n    const methodDefinition = {\n      path: method,\n      requestStream: false,\n      responseStream: false,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize\n    };\n    let callProperties = {\n      argument: argument,\n      metadata: checkedArguments.metadata,\n      call: new call_1.ClientUnaryCallImpl(),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n      callback: checkedArguments.callback\n    };\n\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n    }\n\n    const emitter = callProperties.call;\n    const interceptorArgs = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n    };\n    const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n\n    emitter.call = call;\n\n    if (callProperties.callOptions.credentials) {\n      call.setCredentials(callProperties.callOptions.credentials);\n    }\n\n    let responseMessage = null;\n    let receivedStatus = false;\n    call.start(callProperties.metadata, {\n      onReceiveMetadata: metadata => {\n        emitter.emit('metadata', metadata);\n      },\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message) {\n        if (responseMessage !== null) {\n          call.cancelWithStatus(constants_1.Status.INTERNAL, 'Too many responses received');\n        }\n\n        responseMessage = message;\n      },\n\n      onReceiveStatus(status) {\n        if (receivedStatus) {\n          return;\n        }\n\n        receivedStatus = true;\n\n        if (status.code === constants_1.Status.OK) {\n          if (responseMessage === null) {\n            callProperties.callback(call_1.callErrorFromStatus({\n              code: constants_1.Status.INTERNAL,\n              details: 'No message received',\n              metadata: status.metadata\n            }));\n          } else {\n            callProperties.callback(null, responseMessage);\n          }\n        } else {\n          callProperties.callback(call_1.callErrorFromStatus(status));\n        }\n\n        emitter.emit('status', status);\n      }\n\n    });\n    call.sendMessage(argument);\n    call.halfClose();\n    return emitter;\n  }\n\n  makeClientStreamRequest(method, serialize, deserialize, metadata, options, callback) {\n    var _a, _b;\n\n    const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\n    const methodDefinition = {\n      path: method,\n      requestStream: true,\n      responseStream: false,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize\n    };\n    let callProperties = {\n      metadata: checkedArguments.metadata,\n      call: new call_1.ClientWritableStreamImpl(serialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n      callback: checkedArguments.callback\n    };\n\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n    }\n\n    const emitter = callProperties.call;\n    const interceptorArgs = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n    };\n    const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n\n    emitter.call = call;\n\n    if (callProperties.callOptions.credentials) {\n      call.setCredentials(callProperties.callOptions.credentials);\n    }\n\n    let responseMessage = null;\n    let receivedStatus = false;\n    call.start(callProperties.metadata, {\n      onReceiveMetadata: metadata => {\n        emitter.emit('metadata', metadata);\n      },\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message) {\n        if (responseMessage !== null) {\n          call.cancelWithStatus(constants_1.Status.INTERNAL, 'Too many responses received');\n        }\n\n        responseMessage = message;\n      },\n\n      onReceiveStatus(status) {\n        if (receivedStatus) {\n          return;\n        }\n\n        receivedStatus = true;\n\n        if (status.code === constants_1.Status.OK) {\n          if (responseMessage === null) {\n            callProperties.callback(call_1.callErrorFromStatus({\n              code: constants_1.Status.INTERNAL,\n              details: 'No message received',\n              metadata: status.metadata\n            }));\n          } else {\n            callProperties.callback(null, responseMessage);\n          }\n        } else {\n          callProperties.callback(call_1.callErrorFromStatus(status));\n        }\n\n        emitter.emit('status', status);\n      }\n\n    });\n    return emitter;\n  }\n\n  checkMetadataAndOptions(arg1, arg2) {\n    let metadata;\n    let options;\n\n    if (arg1 instanceof metadata_1.Metadata) {\n      metadata = arg1;\n\n      if (arg2) {\n        options = arg2;\n      } else {\n        options = {};\n      }\n    } else {\n      if (arg1) {\n        options = arg1;\n      } else {\n        options = {};\n      }\n\n      metadata = new metadata_1.Metadata();\n    }\n\n    return {\n      metadata,\n      options\n    };\n  }\n\n  makeServerStreamRequest(method, serialize, deserialize, argument, metadata, options) {\n    var _a, _b;\n\n    const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n    const methodDefinition = {\n      path: method,\n      requestStream: false,\n      responseStream: true,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize\n    };\n    let callProperties = {\n      argument: argument,\n      metadata: checkedArguments.metadata,\n      call: new call_1.ClientReadableStreamImpl(deserialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options\n    };\n\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n    }\n\n    const stream = callProperties.call;\n    const interceptorArgs = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n    };\n    const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n\n    stream.call = call;\n\n    if (callProperties.callOptions.credentials) {\n      call.setCredentials(callProperties.callOptions.credentials);\n    }\n\n    let receivedStatus = false;\n    call.start(callProperties.metadata, {\n      onReceiveMetadata(metadata) {\n        stream.emit('metadata', metadata);\n      },\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message) {\n        stream.push(message);\n      },\n\n      onReceiveStatus(status) {\n        if (receivedStatus) {\n          return;\n        }\n\n        receivedStatus = true;\n        stream.push(null);\n\n        if (status.code !== constants_1.Status.OK) {\n          stream.emit('error', call_1.callErrorFromStatus(status));\n        }\n\n        stream.emit('status', status);\n      }\n\n    });\n    call.sendMessage(argument);\n    call.halfClose();\n    return stream;\n  }\n\n  makeBidiStreamRequest(method, serialize, deserialize, metadata, options) {\n    var _a, _b;\n\n    const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n    const methodDefinition = {\n      path: method,\n      requestStream: true,\n      responseStream: true,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize\n    };\n    let callProperties = {\n      metadata: checkedArguments.metadata,\n      call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options\n    };\n\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n    }\n\n    const stream = callProperties.call;\n    const interceptorArgs = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n    };\n    const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n\n    stream.call = call;\n\n    if (callProperties.callOptions.credentials) {\n      call.setCredentials(callProperties.callOptions.credentials);\n    }\n\n    let receivedStatus = false;\n    call.start(callProperties.metadata, {\n      onReceiveMetadata(metadata) {\n        stream.emit('metadata', metadata);\n      },\n\n      onReceiveMessage(message) {\n        stream.push(message);\n      },\n\n      onReceiveStatus(status) {\n        if (receivedStatus) {\n          return;\n        }\n\n        receivedStatus = true;\n        stream.push(null);\n\n        if (status.code !== constants_1.Status.OK) {\n          stream.emit('error', call_1.callErrorFromStatus(status));\n        }\n\n        stream.emit('status', status);\n      }\n\n    });\n    return stream;\n  }\n\n}\n\nexports.Client = Client;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AAeA;;AACA;;AAGA;;AACA;;AAEA;;AAcA,MAAMA,cAAc,GAAGC,MAAM,EAA7B;AACA,MAAMC,kBAAkB,GAAGD,MAAM,EAAjC;AACA,MAAME,2BAA2B,GAAGF,MAAM,EAA1C;AACA,MAAMG,kCAAkC,GAAGH,MAAM,EAAjD;;AAEA,SAASI,UAAT,CACEC,GADF,EACuE;EAErE,OAAO,OAAOA,GAAP,KAAe,UAAtB;AACD;AAgDD;;;;;;AAIA,MAAaC,MAAb,CAAmB;EAKjBC,YACEC,OADF,EAEEC,WAFF,EAG6B;IAAA,IAA3BC,OAA2B,uEAAF,EAAE;;;;IAE3BA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,OAAlB,CAAV;IACA,KAAKT,kBAAL,IAAwB,MAAGS,OAAO,CAACG,YAAX,MAAuB,IAAvB,IAAuBC,aAAvB,GAAuBA,EAAvB,GAA2B,EAAnD;IACA,OAAOJ,OAAO,CAACG,YAAf;IACA,KAAKX,2BAAL,IAAiC,MAAGQ,OAAO,CAACK,qBAAX,MAAgC,IAAhC,IAAgCC,aAAhC,GAAgCA,EAAhC,GAAoC,EAArE;IACA,OAAON,OAAO,CAACK,qBAAf;;IACA,IACE,KAAKd,kBAAL,EAAyBgB,MAAzB,GAAkC,CAAlC,IACA,KAAKf,2BAAL,EAAkCe,MAAlC,GAA2C,CAF7C,EAGE;MACA,MAAM,IAAIC,KAAJ,CACJ,wEACE,0DAFE,CAAN;IAID;;IACD,KAAKf,kCAAL,IACEO,OAAO,CAACS,yBADV;IAEA,OAAOT,OAAO,CAACS,yBAAf;;IACA,IAAIT,OAAO,CAACU,eAAZ,EAA6B;MAC3B,KAAKrB,cAAL,IAAuBW,OAAO,CAACU,eAA/B;IACD,CAFD,MAEO,IAAIV,OAAO,CAACW,sBAAZ,EAAoC;MACzC,MAAMA,sBAAsB,GAAGX,OAAO,CAACW,sBAAvC;MACA,OAAOX,OAAO,CAACW,sBAAf;MACA,KAAKtB,cAAL,IAAuBsB,sBAAsB,CAC3Cb,OAD2C,EAE3CC,WAF2C,EAG3CC,OAH2C,CAA7C;IAKD,CARM,MAQA;MACL,KAAKX,cAAL,IAAuB,IAAIuB,+BAAJ,CACrBd,OADqB,EAErBC,WAFqB,EAGrBC,OAHqB,CAAvB;IAKD;EACF;;EAEDa,KAAK;IACH,KAAKxB,cAAL,EAAqBwB,KAArB;EACD;;EAEDC,UAAU;IACR,OAAO,KAAKzB,cAAL,CAAP;EACD;;EAED0B,YAAY,CAACC,QAAD,EAAqBC,QAArB,EAAsD;IAChE,MAAMC,UAAU,GAAIC,GAAD,IAAgB;MACjC,IAAIA,GAAJ,EAAS;QACPF,QAAQ,CAAC,IAAIT,KAAJ,CAAU,uCAAV,CAAD,CAAR;QACA;MACD;;MACD,IAAIY,QAAJ;;MACA,IAAI;QACFA,QAAQ,GAAG,KAAK/B,cAAL,EAAqBgC,oBAArB,CAA0C,IAA1C,CAAX;MACD,CAFD,CAEE,OAAOC,CAAP,EAAU;QACVL,QAAQ,CAAC,IAAIT,KAAJ,CAAU,6BAAV,CAAD,CAAR;QACA;MACD;;MACD,IAAIY,QAAQ,KAAKG,uCAAkBC,KAAnC,EAA0C;QACxCP,QAAQ;MACT,CAFD,MAEO;QACL,IAAI;UACF,KAAK5B,cAAL,EAAqBoC,sBAArB,CACEL,QADF,EAEEJ,QAFF,EAGEE,UAHF;QAKD,CAND,CAME,OAAOI,CAAP,EAAU;UACVL,QAAQ,CAAC,IAAIT,KAAJ,CAAU,6BAAV,CAAD,CAAR;QACD;MACF;IACF,CAzBD;;IA0BAkB,YAAY,CAACR,UAAD,CAAZ;EACD;;EAEOS,mCAAmC,CACzCC,IADyC,EAEzCC,IAFyC,EAGzCC,IAHyC,EAGP;IAMlC,IAAIpC,UAAU,CAACkC,IAAD,CAAd,EAAsB;MACpB,OAAO;QAAEG,QAAQ,EAAE,IAAIC,mBAAJ,EAAZ;QAA4BhC,OAAO,EAAE,EAArC;QAAyCiB,QAAQ,EAAEW;MAAnD,CAAP;IACD,CAFD,MAEO,IAAIlC,UAAU,CAACmC,IAAD,CAAd,EAAsB;MAC3B,IAAID,IAAI,YAAYI,mBAApB,EAA8B;QAC5B,OAAO;UAAED,QAAQ,EAAEH,IAAZ;UAAkB5B,OAAO,EAAE,EAA3B;UAA+BiB,QAAQ,EAAEY;QAAzC,CAAP;MACD,CAFD,MAEO;QACL,OAAO;UAAEE,QAAQ,EAAE,IAAIC,mBAAJ,EAAZ;UAA4BhC,OAAO,EAAE4B,IAArC;UAA2CX,QAAQ,EAAEY;QAArD,CAAP;MACD;IACF,CANM,MAMA;MACL,IACE,EACED,IAAI,YAAYI,mBAAhB,IACAH,IAAI,YAAY5B,MADhB,IAEAP,UAAU,CAACoC,IAAD,CAHZ,CADF,EAME;QACA,MAAM,IAAItB,KAAJ,CAAU,4BAAV,CAAN;MACD;;MACD,OAAO;QAAEuB,QAAQ,EAAEH,IAAZ;QAAkB5B,OAAO,EAAE6B,IAA3B;QAAiCZ,QAAQ,EAAEa;MAA3C,CAAP;IACD;EACF;;EAkCDG,gBAAgB,CACdC,MADc,EAEdC,SAFc,EAGdC,WAHc,EAIdC,QAJc,EAKdN,QALc,EAMd/B,OANc,EAOdiB,QAPc,EAOwB;;;IAEtC,MAAMqB,gBAAgB,GAAG,KAAKX,mCAAL,CACvBI,QADuB,EAEvB/B,OAFuB,EAGvBiB,QAHuB,CAAzB;IAKA,MAAMsB,gBAAgB,GAGlB;MACFC,IAAI,EAAEN,MADJ;MAEFO,aAAa,EAAE,KAFb;MAGFC,cAAc,EAAE,KAHd;MAIFC,gBAAgB,EAAER,SAJhB;MAKFS,mBAAmB,EAAER;IALnB,CAHJ;IAUA,IAAIS,cAAc,GAA8C;MAC9DR,QAAQ,EAAEA,QADoD;MAE9DN,QAAQ,EAAEO,gBAAgB,CAACP,QAFmC;MAG9De,IAAI,EAAE,IAAIC,0BAAJ,EAHwD;MAI9DC,OAAO,EAAE,KAAK3D,cAAL,CAJqD;MAK9DkD,gBAAgB,EAAEA,gBAL4C;MAM9DU,WAAW,EAAEX,gBAAgB,CAACtC,OANgC;MAO9DiB,QAAQ,EAAEqB,gBAAgB,CAACrB;IAPmC,CAAhE;;IASA,IAAI,KAAKxB,kCAAL,CAAJ,EAA8C;MAC5CoD,cAAc,GAAG,KAAKpD,kCAAL,EACfoD,cADe,CAAjB;IAGD;;IACD,MAAMK,OAAO,GAAoBL,cAAc,CAACC,IAAhD;IACA,MAAMK,eAAe,GAAyB;MAC5CC,kBAAkB,EAAE,KAAK7D,kBAAL,CADwB;MAE5C8D,0BAA0B,EAAE,KAAK7D,2BAAL,CAFgB;MAG5C8D,gBAAgB,QAAET,cAAc,CAACI,WAAf,CAA2B9C,YAA7B,MAAyC,IAAzC,IAAyCC,aAAzC,GAAyCA,EAAzC,GAA6C,EAHjB;MAI5CmD,wBAAwB,QACtBV,cAAc,CAACI,WAAf,CAA2B5C,qBADL,MAC0B,IAD1B,IAC0BC,aAD1B,GAC0BA,EAD1B,GAC8B;IALV,CAA9C;IAOA,MAAMwC,IAAI,GAA8BU,0CACtCL,eADsC,EAEtCN,cAAc,CAACN,gBAFuB,EAGtCM,cAAc,CAACI,WAHuB,EAItCJ,cAAc,CAACG,OAJuB,CAAxC;IAMA;;;;;IAIAE,OAAO,CAACJ,IAAR,GAAeA,IAAf;;IACA,IAAID,cAAc,CAACI,WAAf,CAA2BlD,WAA/B,EAA4C;MAC1C+C,IAAI,CAACW,cAAL,CAAoBZ,cAAc,CAACI,WAAf,CAA2BlD,WAA/C;IACD;;IACD,IAAI2D,eAAe,GAAwB,IAA3C;IACA,IAAIC,cAAc,GAAG,KAArB;IACAb,IAAI,CAACc,KAAL,CAAWf,cAAc,CAACd,QAA1B,EAAoC;MAClC8B,iBAAiB,EAAG9B,QAAD,IAAa;QAC9BmB,OAAO,CAACY,IAAR,CAAa,UAAb,EAAyB/B,QAAzB;MACD,CAHiC;;MAIlC;MACAgC,gBAAgB,CAACC,OAAD,EAAa;QAC3B,IAAIN,eAAe,KAAK,IAAxB,EAA8B;UAC5BZ,IAAI,CAACmB,gBAAL,CAAsBC,mBAAOC,QAA7B,EAAuC,6BAAvC;QACD;;QACDT,eAAe,GAAGM,OAAlB;MACD,CAViC;;MAWlCI,eAAe,CAACC,MAAD,EAAqB;QAClC,IAAIV,cAAJ,EAAoB;UAClB;QACD;;QACDA,cAAc,GAAG,IAAjB;;QACA,IAAIU,MAAM,CAACC,IAAP,KAAgBJ,mBAAOK,EAA3B,EAA+B;UAC7B,IAAIb,eAAe,KAAK,IAAxB,EAA8B;YAC5Bb,cAAc,CAAC5B,QAAf,CAAyB8B,2BAAoB;cAC3CuB,IAAI,EAAEJ,mBAAOC,QAD8B;cAE3CK,OAAO,EAAE,qBAFkC;cAG3CzC,QAAQ,EAAEsC,MAAM,CAACtC;YAH0B,CAApB,CAAzB;UAKD,CAND,MAMO;YACLc,cAAc,CAAC5B,QAAf,CAAyB,IAAzB,EAA+ByC,eAA/B;UACD;QACF,CAVD,MAUO;UACLb,cAAc,CAAC5B,QAAf,CAAyB8B,2BAAoBsB,MAApB,CAAzB;QACD;;QACDnB,OAAO,CAACY,IAAR,CAAa,QAAb,EAAuBO,MAAvB;MACD;;IA9BiC,CAApC;IAgCAvB,IAAI,CAAC2B,WAAL,CAAiBpC,QAAjB;IACAS,IAAI,CAAC4B,SAAL;IACA,OAAOxB,OAAP;EACD;;EA8BDyB,uBAAuB,CACrBzC,MADqB,EAErBC,SAFqB,EAGrBC,WAHqB,EAIrBL,QAJqB,EAKrB/B,OALqB,EAMrBiB,QANqB,EAMiB;;;IAEtC,MAAMqB,gBAAgB,GAAG,KAAKX,mCAAL,CACvBI,QADuB,EAEvB/B,OAFuB,EAGvBiB,QAHuB,CAAzB;IAKA,MAAMsB,gBAAgB,GAGlB;MACFC,IAAI,EAAEN,MADJ;MAEFO,aAAa,EAAE,IAFb;MAGFC,cAAc,EAAE,KAHd;MAIFC,gBAAgB,EAAER,SAJhB;MAKFS,mBAAmB,EAAER;IALnB,CAHJ;IAUA,IAAIS,cAAc,GAA8C;MAC9Dd,QAAQ,EAAEO,gBAAgB,CAACP,QADmC;MAE9De,IAAI,EAAE,IAAIC,+BAAJ,CAA0CZ,SAA1C,CAFwD;MAG9Da,OAAO,EAAE,KAAK3D,cAAL,CAHqD;MAI9DkD,gBAAgB,EAAEA,gBAJ4C;MAK9DU,WAAW,EAAEX,gBAAgB,CAACtC,OALgC;MAM9DiB,QAAQ,EAAEqB,gBAAgB,CAACrB;IANmC,CAAhE;;IAQA,IAAI,KAAKxB,kCAAL,CAAJ,EAA8C;MAC5CoD,cAAc,GAAG,KAAKpD,kCAAL,EACfoD,cADe,CAAjB;IAGD;;IACD,MAAMK,OAAO,GAAsCL,cAAc,CAACC,IAAlE;IACA,MAAMK,eAAe,GAAyB;MAC5CC,kBAAkB,EAAE,KAAK7D,kBAAL,CADwB;MAE5C8D,0BAA0B,EAAE,KAAK7D,2BAAL,CAFgB;MAG5C8D,gBAAgB,QAAET,cAAc,CAACI,WAAf,CAA2B9C,YAA7B,MAAyC,IAAzC,IAAyCC,aAAzC,GAAyCA,EAAzC,GAA6C,EAHjB;MAI5CmD,wBAAwB,QACtBV,cAAc,CAACI,WAAf,CAA2B5C,qBADL,MAC0B,IAD1B,IAC0BC,aAD1B,GAC0BA,EAD1B,GAC8B;IALV,CAA9C;IAOA,MAAMwC,IAAI,GAA8BU,0CACtCL,eADsC,EAEtCN,cAAc,CAACN,gBAFuB,EAGtCM,cAAc,CAACI,WAHuB,EAItCJ,cAAc,CAACG,OAJuB,CAAxC;IAMA;;;;;IAIAE,OAAO,CAACJ,IAAR,GAAeA,IAAf;;IACA,IAAID,cAAc,CAACI,WAAf,CAA2BlD,WAA/B,EAA4C;MAC1C+C,IAAI,CAACW,cAAL,CAAoBZ,cAAc,CAACI,WAAf,CAA2BlD,WAA/C;IACD;;IACD,IAAI2D,eAAe,GAAwB,IAA3C;IACA,IAAIC,cAAc,GAAG,KAArB;IACAb,IAAI,CAACc,KAAL,CAAWf,cAAc,CAACd,QAA1B,EAAoC;MAClC8B,iBAAiB,EAAG9B,QAAD,IAAa;QAC9BmB,OAAO,CAACY,IAAR,CAAa,UAAb,EAAyB/B,QAAzB;MACD,CAHiC;;MAIlC;MACAgC,gBAAgB,CAACC,OAAD,EAAa;QAC3B,IAAIN,eAAe,KAAK,IAAxB,EAA8B;UAC5BZ,IAAI,CAACmB,gBAAL,CAAsBC,mBAAOC,QAA7B,EAAuC,6BAAvC;QACD;;QACDT,eAAe,GAAGM,OAAlB;MACD,CAViC;;MAWlCI,eAAe,CAACC,MAAD,EAAqB;QAClC,IAAIV,cAAJ,EAAoB;UAClB;QACD;;QACDA,cAAc,GAAG,IAAjB;;QACA,IAAIU,MAAM,CAACC,IAAP,KAAgBJ,mBAAOK,EAA3B,EAA+B;UAC7B,IAAIb,eAAe,KAAK,IAAxB,EAA8B;YAC5Bb,cAAc,CAAC5B,QAAf,CAAyB8B,2BAAoB;cAC3CuB,IAAI,EAAEJ,mBAAOC,QAD8B;cAE3CK,OAAO,EAAE,qBAFkC;cAG3CzC,QAAQ,EAAEsC,MAAM,CAACtC;YAH0B,CAApB,CAAzB;UAKD,CAND,MAMO;YACLc,cAAc,CAAC5B,QAAf,CAAyB,IAAzB,EAA+ByC,eAA/B;UACD;QACF,CAVD,MAUO;UACLb,cAAc,CAAC5B,QAAf,CAAyB8B,2BAAoBsB,MAApB,CAAzB;QACD;;QACDnB,OAAO,CAACY,IAAR,CAAa,QAAb,EAAuBO,MAAvB;MACD;;IA9BiC,CAApC;IAgCA,OAAOnB,OAAP;EACD;;EAEO0B,uBAAuB,CAC7BhD,IAD6B,EAE7BC,IAF6B,EAEX;IAElB,IAAIE,QAAJ;IACA,IAAI/B,OAAJ;;IACA,IAAI4B,IAAI,YAAYI,mBAApB,EAA8B;MAC5BD,QAAQ,GAAGH,IAAX;;MACA,IAAIC,IAAJ,EAAU;QACR7B,OAAO,GAAG6B,IAAV;MACD,CAFD,MAEO;QACL7B,OAAO,GAAG,EAAV;MACD;IACF,CAPD,MAOO;MACL,IAAI4B,IAAJ,EAAU;QACR5B,OAAO,GAAG4B,IAAV;MACD,CAFD,MAEO;QACL5B,OAAO,GAAG,EAAV;MACD;;MACD+B,QAAQ,GAAG,IAAIC,mBAAJ,EAAX;IACD;;IACD,OAAO;MAAED,QAAF;MAAY/B;IAAZ,CAAP;EACD;;EAiBD6E,uBAAuB,CACrB3C,MADqB,EAErBC,SAFqB,EAGrBC,WAHqB,EAIrBC,QAJqB,EAKrBN,QALqB,EAMrB/B,OANqB,EAMA;;;IAErB,MAAMsC,gBAAgB,GAAG,KAAKsC,uBAAL,CAA6B7C,QAA7B,EAAuC/B,OAAvC,CAAzB;IACA,MAAMuC,gBAAgB,GAGlB;MACFC,IAAI,EAAEN,MADJ;MAEFO,aAAa,EAAE,KAFb;MAGFC,cAAc,EAAE,IAHd;MAIFC,gBAAgB,EAAER,SAJhB;MAKFS,mBAAmB,EAAER;IALnB,CAHJ;IAUA,IAAIS,cAAc,GAA8C;MAC9DR,QAAQ,EAAEA,QADoD;MAE9DN,QAAQ,EAAEO,gBAAgB,CAACP,QAFmC;MAG9De,IAAI,EAAE,IAAIC,+BAAJ,CAA2CX,WAA3C,CAHwD;MAI9DY,OAAO,EAAE,KAAK3D,cAAL,CAJqD;MAK9DkD,gBAAgB,EAAEA,gBAL4C;MAM9DU,WAAW,EAAEX,gBAAgB,CAACtC;IANgC,CAAhE;;IAQA,IAAI,KAAKP,kCAAL,CAAJ,EAA8C;MAC5CoD,cAAc,GAAG,KAAKpD,kCAAL,EACfoD,cADe,CAAjB;IAGD;;IACD,MAAMiC,MAAM,GAAuCjC,cAAc,CAACC,IAAlE;IACA,MAAMK,eAAe,GAAyB;MAC5CC,kBAAkB,EAAE,KAAK7D,kBAAL,CADwB;MAE5C8D,0BAA0B,EAAE,KAAK7D,2BAAL,CAFgB;MAG5C8D,gBAAgB,QAAET,cAAc,CAACI,WAAf,CAA2B9C,YAA7B,MAAyC,IAAzC,IAAyCC,aAAzC,GAAyCA,EAAzC,GAA6C,EAHjB;MAI5CmD,wBAAwB,QACtBV,cAAc,CAACI,WAAf,CAA2B5C,qBADL,MAC0B,IAD1B,IAC0BC,aAD1B,GAC0BA,EAD1B,GAC8B;IALV,CAA9C;IAOA,MAAMwC,IAAI,GAA8BU,0CACtCL,eADsC,EAEtCN,cAAc,CAACN,gBAFuB,EAGtCM,cAAc,CAACI,WAHuB,EAItCJ,cAAc,CAACG,OAJuB,CAAxC;IAMA;;;;;IAIA8B,MAAM,CAAChC,IAAP,GAAcA,IAAd;;IACA,IAAID,cAAc,CAACI,WAAf,CAA2BlD,WAA/B,EAA4C;MAC1C+C,IAAI,CAACW,cAAL,CAAoBZ,cAAc,CAACI,WAAf,CAA2BlD,WAA/C;IACD;;IACD,IAAI4D,cAAc,GAAG,KAArB;IACAb,IAAI,CAACc,KAAL,CAAWf,cAAc,CAACd,QAA1B,EAAoC;MAClC8B,iBAAiB,CAAC9B,QAAD,EAAmB;QAClC+C,MAAM,CAAChB,IAAP,CAAY,UAAZ,EAAwB/B,QAAxB;MACD,CAHiC;;MAIlC;MACAgC,gBAAgB,CAACC,OAAD,EAAa;QAC3Bc,MAAM,CAACC,IAAP,CAAYf,OAAZ;MACD,CAPiC;;MAQlCI,eAAe,CAACC,MAAD,EAAqB;QAClC,IAAIV,cAAJ,EAAoB;UAClB;QACD;;QACDA,cAAc,GAAG,IAAjB;QACAmB,MAAM,CAACC,IAAP,CAAY,IAAZ;;QACA,IAAIV,MAAM,CAACC,IAAP,KAAgBJ,mBAAOK,EAA3B,EAA+B;UAC7BO,MAAM,CAAChB,IAAP,CAAY,OAAZ,EAAqBf,2BAAoBsB,MAApB,CAArB;QACD;;QACDS,MAAM,CAAChB,IAAP,CAAY,QAAZ,EAAsBO,MAAtB;MACD;;IAlBiC,CAApC;IAoBAvB,IAAI,CAAC2B,WAAL,CAAiBpC,QAAjB;IACAS,IAAI,CAAC4B,SAAL;IACA,OAAOI,MAAP;EACD;;EAeDE,qBAAqB,CACnB9C,MADmB,EAEnBC,SAFmB,EAGnBC,WAHmB,EAInBL,QAJmB,EAKnB/B,OALmB,EAKE;;;IAErB,MAAMsC,gBAAgB,GAAG,KAAKsC,uBAAL,CAA6B7C,QAA7B,EAAuC/B,OAAvC,CAAzB;IACA,MAAMuC,gBAAgB,GAGlB;MACFC,IAAI,EAAEN,MADJ;MAEFO,aAAa,EAAE,IAFb;MAGFC,cAAc,EAAE,IAHd;MAIFC,gBAAgB,EAAER,SAJhB;MAKFS,mBAAmB,EAAER;IALnB,CAHJ;IAUA,IAAIS,cAAc,GAA8C;MAC9Dd,QAAQ,EAAEO,gBAAgB,CAACP,QADmC;MAE9De,IAAI,EAAE,IAAIC,6BAAJ,CACJZ,SADI,EAEJC,WAFI,CAFwD;MAM9DY,OAAO,EAAE,KAAK3D,cAAL,CANqD;MAO9DkD,gBAAgB,EAAEA,gBAP4C;MAQ9DU,WAAW,EAAEX,gBAAgB,CAACtC;IARgC,CAAhE;;IAUA,IAAI,KAAKP,kCAAL,CAAJ,EAA8C;MAC5CoD,cAAc,GAAG,KAAKpD,kCAAL,EACfoD,cADe,CAAjB;IAGD;;IACD,MAAMiC,MAAM,GAGRjC,cAAc,CAACC,IAHnB;IAIA,MAAMK,eAAe,GAAyB;MAC5CC,kBAAkB,EAAE,KAAK7D,kBAAL,CADwB;MAE5C8D,0BAA0B,EAAE,KAAK7D,2BAAL,CAFgB;MAG5C8D,gBAAgB,QAAET,cAAc,CAACI,WAAf,CAA2B9C,YAA7B,MAAyC,IAAzC,IAAyCC,aAAzC,GAAyCA,EAAzC,GAA6C,EAHjB;MAI5CmD,wBAAwB,QACtBV,cAAc,CAACI,WAAf,CAA2B5C,qBADL,MAC0B,IAD1B,IAC0BC,aAD1B,GAC0BA,EAD1B,GAC8B;IALV,CAA9C;IAOA,MAAMwC,IAAI,GAA8BU,0CACtCL,eADsC,EAEtCN,cAAc,CAACN,gBAFuB,EAGtCM,cAAc,CAACI,WAHuB,EAItCJ,cAAc,CAACG,OAJuB,CAAxC;IAMA;;;;;IAIA8B,MAAM,CAAChC,IAAP,GAAcA,IAAd;;IACA,IAAID,cAAc,CAACI,WAAf,CAA2BlD,WAA/B,EAA4C;MAC1C+C,IAAI,CAACW,cAAL,CAAoBZ,cAAc,CAACI,WAAf,CAA2BlD,WAA/C;IACD;;IACD,IAAI4D,cAAc,GAAG,KAArB;IACAb,IAAI,CAACc,KAAL,CAAWf,cAAc,CAACd,QAA1B,EAAoC;MAClC8B,iBAAiB,CAAC9B,QAAD,EAAmB;QAClC+C,MAAM,CAAChB,IAAP,CAAY,UAAZ,EAAwB/B,QAAxB;MACD,CAHiC;;MAIlCgC,gBAAgB,CAACC,OAAD,EAAgB;QAC9Bc,MAAM,CAACC,IAAP,CAAYf,OAAZ;MACD,CANiC;;MAOlCI,eAAe,CAACC,MAAD,EAAqB;QAClC,IAAIV,cAAJ,EAAoB;UAClB;QACD;;QACDA,cAAc,GAAG,IAAjB;QACAmB,MAAM,CAACC,IAAP,CAAY,IAAZ;;QACA,IAAIV,MAAM,CAACC,IAAP,KAAgBJ,mBAAOK,EAA3B,EAA+B;UAC7BO,MAAM,CAAChB,IAAP,CAAY,OAAZ,EAAqBf,2BAAoBsB,MAApB,CAArB;QACD;;QACDS,MAAM,CAAChB,IAAP,CAAY,QAAZ,EAAsBO,MAAtB;MACD;;IAjBiC,CAApC;IAmBA,OAAOS,MAAP;EACD;;AApkBgB;;AAAnBG","names":["CHANNEL_SYMBOL","Symbol","INTERCEPTOR_SYMBOL","INTERCEPTOR_PROVIDER_SYMBOL","CALL_INVOCATION_TRANSFORMER_SYMBOL","isFunction","arg","Client","constructor","address","credentials","options","Object","assign","interceptors","_a","interceptor_providers","_b","length","Error","callInvocationTransformer","channelOverride","channelFactoryOverride","channel_1","close","getChannel","waitForReady","deadline","callback","checkState","err","newState","getConnectivityState","e","connectivity_state_1","READY","watchConnectivityState","setImmediate","checkOptionalUnaryResponseArguments","arg1","arg2","arg3","metadata","metadata_1","makeUnaryRequest","method","serialize","deserialize","argument","checkedArguments","methodDefinition","path","requestStream","responseStream","requestSerialize","responseDeserialize","callProperties","call","call_1","channel","callOptions","emitter","interceptorArgs","clientInterceptors","clientInterceptorProviders","callInterceptors","callInterceptorProviders","client_interceptors_1","setCredentials","responseMessage","receivedStatus","start","onReceiveMetadata","emit","onReceiveMessage","message","cancelWithStatus","constants_1","INTERNAL","onReceiveStatus","status","code","OK","details","sendMessage","halfClose","makeClientStreamRequest","checkMetadataAndOptions","makeServerStreamRequest","stream","push","makeBidiStreamRequest","exports"],"sources":["C:\\Users\\binel\\OneDrive\\Desktop\\Today\\Udemy\\iProfiler\\iProfiler\\iprofiler\\node_modules\\@grpc\\grpc-js\\src\\client.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  ClientDuplexStream,\n  ClientDuplexStreamImpl,\n  ClientReadableStream,\n  ClientReadableStreamImpl,\n  ClientUnaryCall,\n  ClientUnaryCallImpl,\n  ClientWritableStream,\n  ClientWritableStreamImpl,\n  ServiceError,\n  callErrorFromStatus,\n  SurfaceCall,\n} from './call';\nimport { CallCredentials } from './call-credentials';\nimport { Deadline, StatusObject } from './call-stream';\nimport { Channel, ChannelImplementation } from './channel';\nimport { ConnectivityState } from './connectivity-state';\nimport { ChannelCredentials } from './channel-credentials';\nimport { ChannelOptions } from './channel-options';\nimport { Status } from './constants';\nimport { Metadata } from './metadata';\nimport { ClientMethodDefinition } from './make-client';\nimport {\n  getInterceptingCall,\n  Interceptor,\n  InterceptorProvider,\n  InterceptorArguments,\n  InterceptingCallInterface,\n} from './client-interceptors';\nimport {\n  ServerUnaryCall,\n  ServerReadableStream,\n  ServerWritableStream,\n  ServerDuplexStream,\n} from './server-call';\n\nconst CHANNEL_SYMBOL = Symbol();\nconst INTERCEPTOR_SYMBOL = Symbol();\nconst INTERCEPTOR_PROVIDER_SYMBOL = Symbol();\nconst CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();\n\nfunction isFunction<ResponseType>(\n  arg: Metadata | CallOptions | UnaryCallback<ResponseType> | undefined\n): arg is UnaryCallback<ResponseType> {\n  return typeof arg === 'function';\n}\n\nexport interface UnaryCallback<ResponseType> {\n  (err: ServiceError | null, value?: ResponseType): void;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport interface CallOptions {\n  deadline?: Deadline;\n  host?: string;\n  parent?:\n    | ServerUnaryCall<any, any>\n    | ServerReadableStream<any, any>\n    | ServerWritableStream<any, any>\n    | ServerDuplexStream<any, any>;\n  propagate_flags?: number;\n  credentials?: CallCredentials;\n  interceptors?: Interceptor[];\n  interceptor_providers?: InterceptorProvider[];\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nexport interface CallProperties<RequestType, ResponseType> {\n  argument?: RequestType;\n  metadata: Metadata;\n  call: SurfaceCall;\n  channel: Channel;\n  methodDefinition: ClientMethodDefinition<RequestType, ResponseType>;\n  callOptions: CallOptions;\n  callback?: UnaryCallback<ResponseType>;\n}\n\nexport interface CallInvocationTransformer {\n  (callProperties: CallProperties<any, any>): CallProperties<any, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\nexport type ClientOptions = Partial<ChannelOptions> & {\n  channelOverride?: Channel;\n  channelFactoryOverride?: (\n    address: string,\n    credentials: ChannelCredentials,\n    options: ClientOptions\n  ) => Channel;\n  interceptors?: Interceptor[];\n  interceptor_providers?: InterceptorProvider[];\n  callInvocationTransformer?: CallInvocationTransformer;\n};\n\n/**\n * A generic gRPC client. Primarily useful as a base class for all generated\n * clients.\n */\nexport class Client {\n  private readonly [CHANNEL_SYMBOL]: Channel;\n  private readonly [INTERCEPTOR_SYMBOL]: Interceptor[];\n  private readonly [INTERCEPTOR_PROVIDER_SYMBOL]: InterceptorProvider[];\n  private readonly [CALL_INVOCATION_TRANSFORMER_SYMBOL]?: CallInvocationTransformer;\n  constructor(\n    address: string,\n    credentials: ChannelCredentials,\n    options: ClientOptions = {}\n  ) {\n    options = Object.assign({}, options);\n    this[INTERCEPTOR_SYMBOL] = options.interceptors ?? [];\n    delete options.interceptors;\n    this[INTERCEPTOR_PROVIDER_SYMBOL] = options.interceptor_providers ?? [];\n    delete options.interceptor_providers;\n    if (\n      this[INTERCEPTOR_SYMBOL].length > 0 &&\n      this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0\n    ) {\n      throw new Error(\n        'Both interceptors and interceptor_providers were passed as options ' +\n          'to the client constructor. Only one of these is allowed.'\n      );\n    }\n    this[CALL_INVOCATION_TRANSFORMER_SYMBOL] =\n      options.callInvocationTransformer;\n    delete options.callInvocationTransformer;\n    if (options.channelOverride) {\n      this[CHANNEL_SYMBOL] = options.channelOverride;\n    } else if (options.channelFactoryOverride) {\n      const channelFactoryOverride = options.channelFactoryOverride;\n      delete options.channelFactoryOverride;\n      this[CHANNEL_SYMBOL] = channelFactoryOverride(\n        address,\n        credentials,\n        options\n      );\n    } else {\n      this[CHANNEL_SYMBOL] = new ChannelImplementation(\n        address,\n        credentials,\n        options\n      );\n    }\n  }\n\n  close(): void {\n    this[CHANNEL_SYMBOL].close();\n  }\n\n  getChannel(): Channel {\n    return this[CHANNEL_SYMBOL];\n  }\n\n  waitForReady(deadline: Deadline, callback: (error?: Error) => void): void {\n    const checkState = (err?: Error) => {\n      if (err) {\n        callback(new Error('Failed to connect before the deadline'));\n        return;\n      }\n      let newState;\n      try {\n        newState = this[CHANNEL_SYMBOL].getConnectivityState(true);\n      } catch (e) {\n        callback(new Error('The channel has been closed'));\n        return;\n      }\n      if (newState === ConnectivityState.READY) {\n        callback();\n      } else {\n        try {\n          this[CHANNEL_SYMBOL].watchConnectivityState(\n            newState,\n            deadline,\n            checkState\n          );\n        } catch (e) {\n          callback(new Error('The channel has been closed'));\n        }\n      }\n    };\n    setImmediate(checkState);\n  }\n\n  private checkOptionalUnaryResponseArguments<ResponseType>(\n    arg1: Metadata | CallOptions | UnaryCallback<ResponseType>,\n    arg2?: CallOptions | UnaryCallback<ResponseType>,\n    arg3?: UnaryCallback<ResponseType>\n  ): {\n    metadata: Metadata;\n    options: CallOptions;\n    callback: UnaryCallback<ResponseType>;\n  } {\n    if (isFunction(arg1)) {\n      return { metadata: new Metadata(), options: {}, callback: arg1 };\n    } else if (isFunction(arg2)) {\n      if (arg1 instanceof Metadata) {\n        return { metadata: arg1, options: {}, callback: arg2 };\n      } else {\n        return { metadata: new Metadata(), options: arg1, callback: arg2 };\n      }\n    } else {\n      if (\n        !(\n          arg1 instanceof Metadata &&\n          arg2 instanceof Object &&\n          isFunction(arg3)\n        )\n      ) {\n        throw new Error('Incorrect arguments passed');\n      }\n      return { metadata: arg1, options: arg2, callback: arg3 };\n    }\n  }\n\n  makeUnaryRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    metadata: Metadata,\n    options: CallOptions,\n    callback: UnaryCallback<ResponseType>\n  ): ClientUnaryCall;\n  makeUnaryRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    metadata: Metadata,\n    callback: UnaryCallback<ResponseType>\n  ): ClientUnaryCall;\n  makeUnaryRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    options: CallOptions,\n    callback: UnaryCallback<ResponseType>\n  ): ClientUnaryCall;\n  makeUnaryRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    callback: UnaryCallback<ResponseType>\n  ): ClientUnaryCall;\n  makeUnaryRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    metadata: Metadata | CallOptions | UnaryCallback<ResponseType>,\n    options?: CallOptions | UnaryCallback<ResponseType>,\n    callback?: UnaryCallback<ResponseType>\n  ): ClientUnaryCall {\n    const checkedArguments = this.checkOptionalUnaryResponseArguments<ResponseType>(\n      metadata,\n      options,\n      callback\n    );\n    const methodDefinition: ClientMethodDefinition<\n      RequestType,\n      ResponseType\n    > = {\n      path: method,\n      requestStream: false,\n      responseStream: false,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize,\n    };\n    let callProperties: CallProperties<RequestType, ResponseType> = {\n      argument: argument,\n      metadata: checkedArguments.metadata,\n      call: new ClientUnaryCallImpl(),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n      callback: checkedArguments.callback,\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL]!(\n        callProperties\n      ) as CallProperties<RequestType, ResponseType>;\n    }\n    const emitter: ClientUnaryCall = callProperties.call;\n    const interceptorArgs: InterceptorArguments = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: callProperties.callOptions.interceptors ?? [],\n      callInterceptorProviders:\n        callProperties.callOptions.interceptor_providers ?? [],\n    };\n    const call: InterceptingCallInterface = getInterceptingCall(\n      interceptorArgs,\n      callProperties.methodDefinition,\n      callProperties.callOptions,\n      callProperties.channel\n    );\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    emitter.call = call;\n    if (callProperties.callOptions.credentials) {\n      call.setCredentials(callProperties.callOptions.credentials);\n    }\n    let responseMessage: ResponseType | null = null;\n    let receivedStatus = false;\n    call.start(callProperties.metadata, {\n      onReceiveMetadata: (metadata) => {\n        emitter.emit('metadata', metadata);\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message: any) {\n        if (responseMessage !== null) {\n          call.cancelWithStatus(Status.INTERNAL, 'Too many responses received');\n        }\n        responseMessage = message;\n      },\n      onReceiveStatus(status: StatusObject) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        if (status.code === Status.OK) {\n          if (responseMessage === null) {\n            callProperties.callback!(callErrorFromStatus({\n              code: Status.INTERNAL,\n              details: 'No message received',\n              metadata: status.metadata\n            }));\n          } else {\n            callProperties.callback!(null, responseMessage);\n          }\n        } else {\n          callProperties.callback!(callErrorFromStatus(status));\n        }\n        emitter.emit('status', status);\n      },\n    });\n    call.sendMessage(argument);\n    call.halfClose();\n    return emitter;\n  }\n\n  makeClientStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    metadata: Metadata,\n    options: CallOptions,\n    callback: UnaryCallback<ResponseType>\n  ): ClientWritableStream<RequestType>;\n  makeClientStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    metadata: Metadata,\n    callback: UnaryCallback<ResponseType>\n  ): ClientWritableStream<RequestType>;\n  makeClientStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    options: CallOptions,\n    callback: UnaryCallback<ResponseType>\n  ): ClientWritableStream<RequestType>;\n  makeClientStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    callback: UnaryCallback<ResponseType>\n  ): ClientWritableStream<RequestType>;\n  makeClientStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    metadata: Metadata | CallOptions | UnaryCallback<ResponseType>,\n    options?: CallOptions | UnaryCallback<ResponseType>,\n    callback?: UnaryCallback<ResponseType>\n  ): ClientWritableStream<RequestType> {\n    const checkedArguments = this.checkOptionalUnaryResponseArguments<ResponseType>(\n      metadata,\n      options,\n      callback\n    );\n    const methodDefinition: ClientMethodDefinition<\n      RequestType,\n      ResponseType\n    > = {\n      path: method,\n      requestStream: true,\n      responseStream: false,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize,\n    };\n    let callProperties: CallProperties<RequestType, ResponseType> = {\n      metadata: checkedArguments.metadata,\n      call: new ClientWritableStreamImpl<RequestType>(serialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n      callback: checkedArguments.callback,\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL]!(\n        callProperties\n      ) as CallProperties<RequestType, ResponseType>;\n    }\n    const emitter: ClientWritableStream<RequestType> = callProperties.call as ClientWritableStream<RequestType>;\n    const interceptorArgs: InterceptorArguments = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: callProperties.callOptions.interceptors ?? [],\n      callInterceptorProviders:\n        callProperties.callOptions.interceptor_providers ?? [],\n    };\n    const call: InterceptingCallInterface = getInterceptingCall(\n      interceptorArgs,\n      callProperties.methodDefinition,\n      callProperties.callOptions,\n      callProperties.channel\n    );\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    emitter.call = call;\n    if (callProperties.callOptions.credentials) {\n      call.setCredentials(callProperties.callOptions.credentials);\n    }\n    let responseMessage: ResponseType | null = null;\n    let receivedStatus = false;\n    call.start(callProperties.metadata, {\n      onReceiveMetadata: (metadata) => {\n        emitter.emit('metadata', metadata);\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message: any) {\n        if (responseMessage !== null) {\n          call.cancelWithStatus(Status.INTERNAL, 'Too many responses received');\n        }\n        responseMessage = message;\n      },\n      onReceiveStatus(status: StatusObject) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        if (status.code === Status.OK) {\n          if (responseMessage === null) {\n            callProperties.callback!(callErrorFromStatus({\n              code: Status.INTERNAL,\n              details: 'No message received',\n              metadata: status.metadata\n            }));\n          } else {\n            callProperties.callback!(null, responseMessage);\n          }\n        } else {\n          callProperties.callback!(callErrorFromStatus(status));\n        }\n        emitter.emit('status', status);\n      },\n    });\n    return emitter;\n  }\n\n  private checkMetadataAndOptions(\n    arg1?: Metadata | CallOptions,\n    arg2?: CallOptions\n  ): { metadata: Metadata; options: CallOptions } {\n    let metadata: Metadata;\n    let options: CallOptions;\n    if (arg1 instanceof Metadata) {\n      metadata = arg1;\n      if (arg2) {\n        options = arg2;\n      } else {\n        options = {};\n      }\n    } else {\n      if (arg1) {\n        options = arg1;\n      } else {\n        options = {};\n      }\n      metadata = new Metadata();\n    }\n    return { metadata, options };\n  }\n\n  makeServerStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    metadata: Metadata,\n    options?: CallOptions\n  ): ClientReadableStream<ResponseType>;\n  makeServerStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    options?: CallOptions\n  ): ClientReadableStream<ResponseType>;\n  makeServerStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    metadata?: Metadata | CallOptions,\n    options?: CallOptions\n  ): ClientReadableStream<ResponseType> {\n    const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n    const methodDefinition: ClientMethodDefinition<\n      RequestType,\n      ResponseType\n    > = {\n      path: method,\n      requestStream: false,\n      responseStream: true,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize,\n    };\n    let callProperties: CallProperties<RequestType, ResponseType> = {\n      argument: argument,\n      metadata: checkedArguments.metadata,\n      call: new ClientReadableStreamImpl<ResponseType>(deserialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL]!(\n        callProperties\n      ) as CallProperties<RequestType, ResponseType>;\n    }\n    const stream: ClientReadableStream<ResponseType> = callProperties.call as ClientReadableStream<ResponseType>;\n    const interceptorArgs: InterceptorArguments = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: callProperties.callOptions.interceptors ?? [],\n      callInterceptorProviders:\n        callProperties.callOptions.interceptor_providers ?? [],\n    };\n    const call: InterceptingCallInterface = getInterceptingCall(\n      interceptorArgs,\n      callProperties.methodDefinition,\n      callProperties.callOptions,\n      callProperties.channel\n    );\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    stream.call = call;\n    if (callProperties.callOptions.credentials) {\n      call.setCredentials(callProperties.callOptions.credentials);\n    }\n    let receivedStatus = false;\n    call.start(callProperties.metadata, {\n      onReceiveMetadata(metadata: Metadata) {\n        stream.emit('metadata', metadata);\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message: any) {\n        stream.push(message);\n      },\n      onReceiveStatus(status: StatusObject) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        stream.push(null);\n        if (status.code !== Status.OK) {\n          stream.emit('error', callErrorFromStatus(status));\n        }\n        stream.emit('status', status);\n      },\n    });\n    call.sendMessage(argument);\n    call.halfClose();\n    return stream;\n  }\n\n  makeBidiStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    metadata: Metadata,\n    options?: CallOptions\n  ): ClientDuplexStream<RequestType, ResponseType>;\n  makeBidiStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    options?: CallOptions\n  ): ClientDuplexStream<RequestType, ResponseType>;\n  makeBidiStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    metadata?: Metadata | CallOptions,\n    options?: CallOptions\n  ): ClientDuplexStream<RequestType, ResponseType> {\n    const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n    const methodDefinition: ClientMethodDefinition<\n      RequestType,\n      ResponseType\n    > = {\n      path: method,\n      requestStream: true,\n      responseStream: true,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize,\n    };\n    let callProperties: CallProperties<RequestType, ResponseType> = {\n      metadata: checkedArguments.metadata,\n      call: new ClientDuplexStreamImpl<RequestType, ResponseType>(\n        serialize,\n        deserialize\n      ),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL]!(\n        callProperties\n      ) as CallProperties<RequestType, ResponseType>;\n    }\n    const stream: ClientDuplexStream<\n      RequestType,\n      ResponseType\n    > = callProperties.call as ClientDuplexStream<RequestType, ResponseType>;\n    const interceptorArgs: InterceptorArguments = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: callProperties.callOptions.interceptors ?? [],\n      callInterceptorProviders:\n        callProperties.callOptions.interceptor_providers ?? [],\n    };\n    const call: InterceptingCallInterface = getInterceptingCall(\n      interceptorArgs,\n      callProperties.methodDefinition,\n      callProperties.callOptions,\n      callProperties.channel\n    );\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    stream.call = call;\n    if (callProperties.callOptions.credentials) {\n      call.setCredentials(callProperties.callOptions.credentials);\n    }\n    let receivedStatus = false;\n    call.start(callProperties.metadata, {\n      onReceiveMetadata(metadata: Metadata) {\n        stream.emit('metadata', metadata);\n      },\n      onReceiveMessage(message: Buffer) {\n        stream.push(message);\n      },\n      onReceiveStatus(status: StatusObject) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        stream.push(null);\n        if (status.code !== Status.OK) {\n          stream.emit('error', callErrorFromStatus(status));\n        }\n        stream.emit('status', status);\n      },\n    });\n    return stream;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}