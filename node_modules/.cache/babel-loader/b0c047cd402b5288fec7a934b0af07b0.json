{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Http2ServerCallStream = exports.ServerDuplexStreamImpl = exports.ServerWritableStreamImpl = exports.ServerReadableStreamImpl = exports.ServerUnaryCallImpl = void 0;\n\nconst events_1 = require(\"events\");\n\nconst http2 = require(\"http2\");\n\nconst stream_1 = require(\"stream\");\n\nconst zlib = require(\"zlib\");\n\nconst constants_1 = require(\"./constants\");\n\nconst metadata_1 = require(\"./metadata\");\n\nconst stream_decoder_1 = require(\"./stream-decoder\");\n\nconst logging = require(\"./logging\");\n\nconst TRACER_NAME = 'server_call';\n\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\nconst GRPC_ACCEPT_ENCODING_HEADER = 'grpc-accept-encoding';\nconst GRPC_ENCODING_HEADER = 'grpc-encoding';\nconst GRPC_MESSAGE_HEADER = 'grpc-message';\nconst GRPC_STATUS_HEADER = 'grpc-status';\nconst GRPC_TIMEOUT_HEADER = 'grpc-timeout';\nconst DEADLINE_REGEX = /(\\d{1,8})\\s*([HMSmun])/;\nconst deadlineUnitsToMs = {\n  H: 3600000,\n  M: 60000,\n  S: 1000,\n  m: 1,\n  u: 0.001,\n  n: 0.000001\n};\nconst defaultResponseHeaders = {\n  // TODO(cjihrig): Remove these encoding headers from the default response\n  // once compression is integrated.\n  [GRPC_ACCEPT_ENCODING_HEADER]: 'identity,deflate,gzip',\n  [GRPC_ENCODING_HEADER]: 'identity',\n  [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,\n  [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: 'application/grpc+proto'\n};\nconst defaultResponseOptions = {\n  waitForTrailers: true\n};\n\nclass ServerUnaryCallImpl extends events_1.EventEmitter {\n  constructor(call, metadata, request) {\n    super();\n    this.call = call;\n    this.metadata = metadata;\n    this.request = request;\n    this.cancelled = false;\n    this.call.setupSurfaceCall(this);\n  }\n\n  getPeer() {\n    return this.call.getPeer();\n  }\n\n  sendMetadata(responseMetadata) {\n    this.call.sendMetadata(responseMetadata);\n  }\n\n  getDeadline() {\n    return this.call.getDeadline();\n  }\n\n}\n\nexports.ServerUnaryCallImpl = ServerUnaryCallImpl;\n\nclass ServerReadableStreamImpl extends stream_1.Readable {\n  constructor(call, metadata, deserialize, encoding) {\n    super({\n      objectMode: true\n    });\n    this.call = call;\n    this.metadata = metadata;\n    this.deserialize = deserialize;\n    this.cancelled = false;\n    this.call.setupSurfaceCall(this);\n    this.call.setupReadable(this, encoding);\n  }\n\n  _read(size) {\n    if (!this.call.consumeUnpushedMessages(this)) {\n      return;\n    }\n\n    this.call.resume();\n  }\n\n  getPeer() {\n    return this.call.getPeer();\n  }\n\n  sendMetadata(responseMetadata) {\n    this.call.sendMetadata(responseMetadata);\n  }\n\n  getDeadline() {\n    return this.call.getDeadline();\n  }\n\n}\n\nexports.ServerReadableStreamImpl = ServerReadableStreamImpl;\n\nclass ServerWritableStreamImpl extends stream_1.Writable {\n  constructor(call, metadata, serialize, request) {\n    super({\n      objectMode: true\n    });\n    this.call = call;\n    this.metadata = metadata;\n    this.serialize = serialize;\n    this.request = request;\n    this.cancelled = false;\n    this.trailingMetadata = new metadata_1.Metadata();\n    this.call.setupSurfaceCall(this);\n    this.on('error', err => {\n      this.call.sendError(err);\n      this.end();\n    });\n  }\n\n  getPeer() {\n    return this.call.getPeer();\n  }\n\n  sendMetadata(responseMetadata) {\n    this.call.sendMetadata(responseMetadata);\n  }\n\n  getDeadline() {\n    return this.call.getDeadline();\n  }\n\n  _write(chunk, encoding, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback) {\n    try {\n      const response = this.call.serializeMessage(chunk);\n\n      if (!this.call.write(response)) {\n        this.call.once('drain', callback);\n        return;\n      }\n    } catch (err) {\n      err.code = constants_1.Status.INTERNAL;\n      this.emit('error', err);\n    }\n\n    callback();\n  }\n\n  _final(callback) {\n    this.call.sendStatus({\n      code: constants_1.Status.OK,\n      details: 'OK',\n      metadata: this.trailingMetadata\n    });\n    callback(null);\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  end(metadata) {\n    if (metadata) {\n      this.trailingMetadata = metadata;\n    }\n\n    return super.end();\n  }\n\n}\n\nexports.ServerWritableStreamImpl = ServerWritableStreamImpl;\n\nclass ServerDuplexStreamImpl extends stream_1.Duplex {\n  constructor(call, metadata, serialize, deserialize, encoding) {\n    super({\n      objectMode: true\n    });\n    this.call = call;\n    this.metadata = metadata;\n    this.serialize = serialize;\n    this.deserialize = deserialize;\n    this.cancelled = false;\n    this.trailingMetadata = new metadata_1.Metadata();\n    this.call.setupSurfaceCall(this);\n    this.call.setupReadable(this, encoding);\n    this.on('error', err => {\n      this.call.sendError(err);\n      this.end();\n    });\n  }\n\n  getPeer() {\n    return this.call.getPeer();\n  }\n\n  sendMetadata(responseMetadata) {\n    this.call.sendMetadata(responseMetadata);\n  }\n\n  getDeadline() {\n    return this.call.getDeadline();\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  end(metadata) {\n    if (metadata) {\n      this.trailingMetadata = metadata;\n    }\n\n    return super.end();\n  }\n\n}\n\nexports.ServerDuplexStreamImpl = ServerDuplexStreamImpl;\nServerDuplexStreamImpl.prototype._read = ServerReadableStreamImpl.prototype._read;\nServerDuplexStreamImpl.prototype._write = ServerWritableStreamImpl.prototype._write;\nServerDuplexStreamImpl.prototype._final = ServerWritableStreamImpl.prototype._final; // Internal class that wraps the HTTP2 request.\n\nclass Http2ServerCallStream extends events_1.EventEmitter {\n  constructor(stream, handler, options) {\n    super();\n    this.stream = stream;\n    this.handler = handler;\n    this.options = options;\n    this.cancelled = false;\n    this.deadlineTimer = setTimeout(() => {}, 0);\n    this.deadline = Infinity;\n    this.wantTrailers = false;\n    this.metadataSent = false;\n    this.canPush = false;\n    this.isPushPending = false;\n    this.bufferedMessages = [];\n    this.messagesToPush = [];\n    this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n    this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n    this.stream.once('error', err => {\n      /* We need an error handler to avoid uncaught error event exceptions, but\n       * there is nothing we can reasonably do here. Any error event should\n       * have a corresponding close event, which handles emitting the cancelled\n       * event. And the stream is now in a bad state, so we can't reasonably\n       * expect to be able to send an error over it. */\n    });\n    this.stream.once('close', () => {\n      var _a;\n\n      trace('Request to method ' + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + ' stream closed with rstCode ' + this.stream.rstCode);\n      this.cancelled = true;\n      this.emit('cancelled', 'cancelled');\n      this.emit('streamEnd', false);\n      this.sendStatus({\n        code: constants_1.Status.CANCELLED,\n        details: 'Cancelled by client',\n        metadata: new metadata_1.Metadata()\n      });\n    });\n    this.stream.on('drain', () => {\n      this.emit('drain');\n    });\n\n    if ('grpc.max_send_message_length' in options) {\n      this.maxSendMessageSize = options['grpc.max_send_message_length'];\n    }\n\n    if ('grpc.max_receive_message_length' in options) {\n      this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];\n    } // Clear noop timer\n\n\n    clearTimeout(this.deadlineTimer);\n  }\n\n  checkCancelled() {\n    /* In some cases the stream can become destroyed before the close event\n     * fires. That creates a race condition that this check works around */\n    if (this.stream.destroyed || this.stream.closed) {\n      this.cancelled = true;\n    }\n\n    return this.cancelled;\n  }\n\n  getDecompressedMessage(message, encoding) {\n    switch (encoding) {\n      case 'deflate':\n        {\n          return new Promise((resolve, reject) => {\n            zlib.inflate(message.slice(5), (err, output) => {\n              if (err) {\n                this.sendError({\n                  code: constants_1.Status.INTERNAL,\n                  details: `Received \"grpc-encoding\" header \"${encoding}\" but ${encoding} decompression failed`\n                });\n                resolve();\n              } else {\n                resolve(output);\n              }\n            });\n          });\n        }\n\n      case 'gzip':\n        {\n          return new Promise((resolve, reject) => {\n            zlib.unzip(message.slice(5), (err, output) => {\n              if (err) {\n                this.sendError({\n                  code: constants_1.Status.INTERNAL,\n                  details: `Received \"grpc-encoding\" header \"${encoding}\" but ${encoding} decompression failed`\n                });\n                resolve();\n              } else {\n                resolve(output);\n              }\n            });\n          });\n        }\n\n      case 'identity':\n        {\n          return Promise.resolve(message.slice(5));\n        }\n\n      default:\n        {\n          this.sendError({\n            code: constants_1.Status.UNIMPLEMENTED,\n            details: `Received message compressed with unsupported encoding \"${encoding}\"`\n          });\n          return Promise.resolve();\n        }\n    }\n  }\n\n  sendMetadata(customMetadata) {\n    if (this.checkCancelled()) {\n      return;\n    }\n\n    if (this.metadataSent) {\n      return;\n    }\n\n    this.metadataSent = true;\n    const custom = customMetadata ? customMetadata.toHttp2Headers() : null; // TODO(cjihrig): Include compression headers.\n\n    const headers = Object.assign({}, defaultResponseHeaders, custom);\n    this.stream.respond(headers, defaultResponseOptions);\n  }\n\n  receiveMetadata(headers) {\n    const metadata = metadata_1.Metadata.fromHttp2Headers(headers); // TODO(cjihrig): Receive compression metadata.\n\n    const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);\n\n    if (timeoutHeader.length > 0) {\n      const match = timeoutHeader[0].toString().match(DEADLINE_REGEX);\n\n      if (match === null) {\n        const err = new Error('Invalid deadline');\n        err.code = constants_1.Status.OUT_OF_RANGE;\n        this.sendError(err);\n        return metadata;\n      }\n\n      const timeout = +match[1] * deadlineUnitsToMs[match[2]] | 0;\n      const now = new Date();\n      this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);\n      this.deadlineTimer = setTimeout(handleExpiredDeadline, timeout, this);\n      metadata.remove(GRPC_TIMEOUT_HEADER);\n    } // Remove several headers that should not be propagated to the application\n\n\n    metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);\n    metadata.remove(http2.constants.HTTP2_HEADER_TE);\n    metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);\n    metadata.remove('grpc-accept-encoding');\n    return metadata;\n  }\n\n  receiveUnaryMessage(encoding) {\n    return new Promise((resolve, reject) => {\n      const stream = this.stream;\n      const chunks = [];\n      let totalLength = 0;\n      stream.on('data', data => {\n        chunks.push(data);\n        totalLength += data.byteLength;\n      });\n      stream.once('end', async () => {\n        try {\n          const requestBytes = Buffer.concat(chunks, totalLength);\n\n          if (this.maxReceiveMessageSize !== -1 && requestBytes.length > this.maxReceiveMessageSize) {\n            this.sendError({\n              code: constants_1.Status.RESOURCE_EXHAUSTED,\n              details: `Received message larger than max (${requestBytes.length} vs. ${this.maxReceiveMessageSize})`\n            });\n            resolve();\n          }\n\n          this.emit('receiveMessage');\n          const compressed = requestBytes.readUInt8(0) === 1;\n          const compressedMessageEncoding = compressed ? encoding : 'identity';\n          const decompressedMessage = await this.getDecompressedMessage(requestBytes, compressedMessageEncoding); // Encountered an error with decompression; it'll already have been propogated back\n          // Just return early\n\n          if (!decompressedMessage) {\n            resolve();\n          } else {\n            resolve(this.deserializeMessage(decompressedMessage));\n          }\n        } catch (err) {\n          err.code = constants_1.Status.INTERNAL;\n          this.sendError(err);\n          resolve();\n        }\n      });\n    });\n  }\n\n  serializeMessage(value) {\n    const messageBuffer = this.handler.serialize(value); // TODO(cjihrig): Call compression aware serializeMessage().\n\n    const byteLength = messageBuffer.byteLength;\n    const output = Buffer.allocUnsafe(byteLength + 5);\n    output.writeUInt8(0, 0);\n    output.writeUInt32BE(byteLength, 1);\n    messageBuffer.copy(output, 5);\n    return output;\n  }\n\n  deserializeMessage(bytes) {\n    return this.handler.deserialize(bytes);\n  }\n\n  async sendUnaryMessage(err, value, metadata, flags) {\n    if (this.checkCancelled()) {\n      return;\n    }\n\n    if (!metadata) {\n      metadata = new metadata_1.Metadata();\n    }\n\n    if (err) {\n      if (!Object.prototype.hasOwnProperty.call(err, 'metadata')) {\n        err.metadata = metadata;\n      }\n\n      this.sendError(err);\n      return;\n    }\n\n    try {\n      const response = this.serializeMessage(value);\n      this.write(response);\n      this.sendStatus({\n        code: constants_1.Status.OK,\n        details: 'OK',\n        metadata\n      });\n    } catch (err) {\n      err.code = constants_1.Status.INTERNAL;\n      this.sendError(err);\n    }\n  }\n\n  sendStatus(statusObj) {\n    var _a;\n\n    this.emit('callEnd', statusObj.code);\n    this.emit('streamEnd', statusObj.code === constants_1.Status.OK);\n\n    if (this.checkCancelled()) {\n      return;\n    }\n\n    trace('Request to method ' + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + ' ended with status code: ' + constants_1.Status[statusObj.code] + ' details: ' + statusObj.details);\n    clearTimeout(this.deadlineTimer);\n\n    if (!this.wantTrailers) {\n      this.wantTrailers = true;\n      this.stream.once('wantTrailers', () => {\n        const trailersToSend = Object.assign({\n          [GRPC_STATUS_HEADER]: statusObj.code,\n          [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details)\n        }, statusObj.metadata.toHttp2Headers());\n        this.stream.sendTrailers(trailersToSend);\n      });\n      this.sendMetadata();\n      this.stream.end();\n    }\n  }\n\n  sendError(error) {\n    const status = {\n      code: constants_1.Status.UNKNOWN,\n      details: 'message' in error ? error.message : 'Unknown Error',\n      metadata: 'metadata' in error && error.metadata !== undefined ? error.metadata : new metadata_1.Metadata()\n    };\n\n    if ('code' in error && typeof error.code === 'number' && Number.isInteger(error.code)) {\n      status.code = error.code;\n\n      if ('details' in error && typeof error.details === 'string') {\n        status.details = error.details;\n      }\n    }\n\n    this.sendStatus(status);\n  }\n\n  write(chunk) {\n    if (this.checkCancelled()) {\n      return;\n    }\n\n    if (this.maxSendMessageSize !== -1 && chunk.length > this.maxSendMessageSize) {\n      this.sendError({\n        code: constants_1.Status.RESOURCE_EXHAUSTED,\n        details: `Sent message larger than max (${chunk.length} vs. ${this.maxSendMessageSize})`\n      });\n      return;\n    }\n\n    this.sendMetadata();\n    this.emit('sendMessage');\n    return this.stream.write(chunk);\n  }\n\n  resume() {\n    this.stream.resume();\n  }\n\n  setupSurfaceCall(call) {\n    this.once('cancelled', reason => {\n      call.cancelled = true;\n      call.emit('cancelled', reason);\n    });\n  }\n\n  setupReadable(readable, encoding) {\n    const decoder = new stream_decoder_1.StreamDecoder();\n    let readsDone = false;\n    let pendingMessageProcessing = false;\n    let pushedEnd = false;\n\n    const maybePushEnd = () => {\n      if (!pushedEnd && readsDone && !pendingMessageProcessing) {\n        pushedEnd = true;\n        this.pushOrBufferMessage(readable, null);\n      }\n    };\n\n    this.stream.on('data', async data => {\n      const messages = decoder.write(data);\n      pendingMessageProcessing = true;\n      this.stream.pause();\n\n      for (const message of messages) {\n        if (this.maxReceiveMessageSize !== -1 && message.length > this.maxReceiveMessageSize) {\n          this.sendError({\n            code: constants_1.Status.RESOURCE_EXHAUSTED,\n            details: `Received message larger than max (${message.length} vs. ${this.maxReceiveMessageSize})`\n          });\n          return;\n        }\n\n        this.emit('receiveMessage');\n        const compressed = message.readUInt8(0) === 1;\n        const compressedMessageEncoding = compressed ? encoding : 'identity';\n        const decompressedMessage = await this.getDecompressedMessage(message, compressedMessageEncoding); // Encountered an error with decompression; it'll already have been propogated back\n        // Just return early\n\n        if (!decompressedMessage) return;\n        this.pushOrBufferMessage(readable, decompressedMessage);\n      }\n\n      pendingMessageProcessing = false;\n      this.stream.resume();\n      maybePushEnd();\n    });\n    this.stream.once('end', () => {\n      readsDone = true;\n      maybePushEnd();\n    });\n  }\n\n  consumeUnpushedMessages(readable) {\n    this.canPush = true;\n\n    while (this.messagesToPush.length > 0) {\n      const nextMessage = this.messagesToPush.shift();\n      const canPush = readable.push(nextMessage);\n\n      if (nextMessage === null || canPush === false) {\n        this.canPush = false;\n        break;\n      }\n    }\n\n    return this.canPush;\n  }\n\n  pushOrBufferMessage(readable, messageBytes) {\n    if (this.isPushPending) {\n      this.bufferedMessages.push(messageBytes);\n    } else {\n      this.pushMessage(readable, messageBytes);\n    }\n  }\n\n  async pushMessage(readable, messageBytes) {\n    if (messageBytes === null) {\n      trace('Received end of stream');\n\n      if (this.canPush) {\n        readable.push(null);\n      } else {\n        this.messagesToPush.push(null);\n      }\n\n      return;\n    }\n\n    trace('Received message of length ' + messageBytes.length);\n    this.isPushPending = true;\n\n    try {\n      const deserialized = await this.deserializeMessage(messageBytes);\n\n      if (this.canPush) {\n        if (!readable.push(deserialized)) {\n          this.canPush = false;\n          this.stream.pause();\n        }\n      } else {\n        this.messagesToPush.push(deserialized);\n      }\n    } catch (error) {\n      // Ignore any remaining messages when errors occur.\n      this.bufferedMessages.length = 0;\n\n      if (!('code' in error && typeof error.code === 'number' && Number.isInteger(error.code) && error.code >= constants_1.Status.OK && error.code <= constants_1.Status.UNAUTHENTICATED)) {\n        // The error code is not a valid gRPC code so its being overwritten.\n        error.code = constants_1.Status.INTERNAL;\n      }\n\n      readable.emit('error', error);\n    }\n\n    this.isPushPending = false;\n\n    if (this.bufferedMessages.length > 0) {\n      this.pushMessage(readable, this.bufferedMessages.shift());\n    }\n  }\n\n  getPeer() {\n    const socket = this.stream.session.socket;\n\n    if (socket.remoteAddress) {\n      if (socket.remotePort) {\n        return `${socket.remoteAddress}:${socket.remotePort}`;\n      } else {\n        return socket.remoteAddress;\n      }\n    } else {\n      return 'unknown';\n    }\n  }\n\n  getDeadline() {\n    return this.deadline;\n  }\n\n}\n\nexports.Http2ServerCallStream = Http2ServerCallStream;\n\nfunction handleExpiredDeadline(call) {\n  const err = new Error('Deadline exceeded');\n  err.code = constants_1.Status.DEADLINE_EXCEEDED;\n  call.sendError(err);\n  call.cancelled = true;\n  call.emit('cancelled', 'deadline');\n}","map":{"version":3,"mappings":"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","names":["TRACER_NAME","trace","text","logging","constants_1","DEBUG","GRPC_ACCEPT_ENCODING_HEADER","GRPC_ENCODING_HEADER","GRPC_MESSAGE_HEADER","GRPC_STATUS_HEADER","GRPC_TIMEOUT_HEADER","DEADLINE_REGEX","deadlineUnitsToMs","H","M","S","m","u","n","defaultResponseHeaders","http2","constants","HTTP2_HEADER_STATUS","HTTP_STATUS_OK","HTTP2_HEADER_CONTENT_TYPE","defaultResponseOptions","waitForTrailers","ServerUnaryCallImpl","events_1","constructor","call","metadata","request","cancelled","setupSurfaceCall","getPeer","sendMetadata","responseMetadata","getDeadline","exports","ServerReadableStreamImpl","stream_1","deserialize","encoding","objectMode","setupReadable","_read","size","consumeUnpushedMessages","resume","ServerWritableStreamImpl","serialize","trailingMetadata","metadata_1","on","err","sendError","end","_write","chunk","callback","response","serializeMessage","write","once","code","INTERNAL","emit","_final","sendStatus","OK","details","ServerDuplexStreamImpl","prototype","Http2ServerCallStream","stream","handler","options","setTimeout","Infinity","_a","path","rstCode","CANCELLED","maxSendMessageSize","maxReceiveMessageSize","clearTimeout","deadlineTimer","checkCancelled","destroyed","closed","getDecompressedMessage","message","Promise","resolve","reject","zlib","inflate","slice","output","unzip","UNIMPLEMENTED","customMetadata","metadataSent","custom","toHttp2Headers","headers","Object","assign","respond","receiveMetadata","fromHttp2Headers","timeoutHeader","get","length","match","toString","Error","OUT_OF_RANGE","timeout","now","Date","deadline","setMilliseconds","getMilliseconds","handleExpiredDeadline","remove","HTTP2_HEADER_ACCEPT_ENCODING","HTTP2_HEADER_TE","receiveUnaryMessage","chunks","totalLength","data","push","byteLength","requestBytes","Buffer","concat","RESOURCE_EXHAUSTED","compressed","readUInt8","compressedMessageEncoding","decompressedMessage","deserializeMessage","value","messageBuffer","allocUnsafe","writeUInt8","writeUInt32BE","copy","bytes","sendUnaryMessage","flags","hasOwnProperty","statusObj","wantTrailers","trailersToSend","encodeURI","sendTrailers","error","status","UNKNOWN","undefined","Number","isInteger","reason","readable","decoder","stream_decoder_1","readsDone","pendingMessageProcessing","pushedEnd","maybePushEnd","pushOrBufferMessage","messages","pause","canPush","messagesToPush","nextMessage","shift","messageBytes","isPushPending","bufferedMessages","pushMessage","deserialized","UNAUTHENTICATED","socket","session","remoteAddress","remotePort","DEADLINE_EXCEEDED"],"sources":["C:\\Users\\binel\\OneDrive\\Desktop\\Today\\Udemy\\iProfiler\\iProfiler\\iprofiler\\node_modules\\@grpc\\grpc-js\\src\\server-call.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { EventEmitter } from 'events';\nimport * as http2 from 'http2';\nimport { Duplex, Readable, Writable } from 'stream';\nimport * as zlib from 'zlib';\n\nimport { Deadline, StatusObject } from './call-stream';\nimport {\n  Status,\n  DEFAULT_MAX_SEND_MESSAGE_LENGTH,\n  DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH,\n  LogVerbosity,\n} from './constants';\nimport { Deserialize, Serialize } from './make-client';\nimport { Metadata } from './metadata';\nimport { StreamDecoder } from './stream-decoder';\nimport { ObjectReadable, ObjectWritable } from './object-stream';\nimport { ChannelOptions } from './channel-options';\nimport * as logging from './logging';\n\nconst TRACER_NAME = 'server_call';\n\nfunction trace(text: string): void {\n  logging.trace(LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\ninterface DeadlineUnitIndexSignature {\n  [name: string]: number;\n}\n\nconst GRPC_ACCEPT_ENCODING_HEADER = 'grpc-accept-encoding';\nconst GRPC_ENCODING_HEADER = 'grpc-encoding';\nconst GRPC_MESSAGE_HEADER = 'grpc-message';\nconst GRPC_STATUS_HEADER = 'grpc-status';\nconst GRPC_TIMEOUT_HEADER = 'grpc-timeout';\nconst DEADLINE_REGEX = /(\\d{1,8})\\s*([HMSmun])/;\nconst deadlineUnitsToMs: DeadlineUnitIndexSignature = {\n  H: 3600000,\n  M: 60000,\n  S: 1000,\n  m: 1,\n  u: 0.001,\n  n: 0.000001,\n};\nconst defaultResponseHeaders = {\n  // TODO(cjihrig): Remove these encoding headers from the default response\n  // once compression is integrated.\n  [GRPC_ACCEPT_ENCODING_HEADER]: 'identity,deflate,gzip',\n  [GRPC_ENCODING_HEADER]: 'identity',\n  [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,\n  [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: 'application/grpc+proto',\n};\nconst defaultResponseOptions = {\n  waitForTrailers: true,\n} as http2.ServerStreamResponseOptions;\n\nexport type ServerStatusResponse = Partial<StatusObject>;\n\nexport type ServerErrorResponse = ServerStatusResponse & Error;\n\nexport type ServerSurfaceCall = {\n  cancelled: boolean;\n  readonly metadata: Metadata;\n  getPeer(): string;\n  sendMetadata(responseMetadata: Metadata): void;\n  getDeadline(): Deadline;\n} & EventEmitter;\n\nexport type ServerUnaryCall<RequestType, ResponseType> = ServerSurfaceCall & {\n  request: RequestType;\n};\nexport type ServerReadableStream<\n  RequestType,\n  ResponseType\n> = ServerSurfaceCall & ObjectReadable<RequestType>;\nexport type ServerWritableStream<\n  RequestType,\n  ResponseType\n> = ServerSurfaceCall &\n  ObjectWritable<ResponseType> & {\n    request: RequestType;\n    end: (metadata?: Metadata) => void;\n  };\nexport type ServerDuplexStream<RequestType, ResponseType> = ServerSurfaceCall &\n  ObjectReadable<RequestType> &\n  ObjectWritable<ResponseType> & { end: (metadata?: Metadata) => void };\n\nexport class ServerUnaryCallImpl<RequestType, ResponseType>\n  extends EventEmitter\n  implements ServerUnaryCall<RequestType, ResponseType> {\n  cancelled: boolean;\n\n  constructor(\n    private call: Http2ServerCallStream<RequestType, ResponseType>,\n    public metadata: Metadata,\n    public request: RequestType\n  ) {\n    super();\n    this.cancelled = false;\n    this.call.setupSurfaceCall(this);\n  }\n\n  getPeer(): string {\n    return this.call.getPeer();\n  }\n\n  sendMetadata(responseMetadata: Metadata): void {\n    this.call.sendMetadata(responseMetadata);\n  }\n\n  getDeadline(): Deadline {\n    return this.call.getDeadline();\n  }\n}\n\nexport class ServerReadableStreamImpl<RequestType, ResponseType>\n  extends Readable\n  implements ServerReadableStream<RequestType, ResponseType> {\n  cancelled: boolean;\n\n  constructor(\n    private call: Http2ServerCallStream<RequestType, ResponseType>,\n    public metadata: Metadata,\n    public deserialize: Deserialize<RequestType>,\n    encoding: string\n  ) {\n    super({ objectMode: true });\n    this.cancelled = false;\n    this.call.setupSurfaceCall(this);\n    this.call.setupReadable(this, encoding);\n  }\n\n  _read(size: number) {\n    if (!this.call.consumeUnpushedMessages(this)) {\n      return;\n    }\n\n    this.call.resume();\n  }\n\n  getPeer(): string {\n    return this.call.getPeer();\n  }\n\n  sendMetadata(responseMetadata: Metadata): void {\n    this.call.sendMetadata(responseMetadata);\n  }\n\n  getDeadline(): Deadline {\n    return this.call.getDeadline();\n  }\n}\n\nexport class ServerWritableStreamImpl<RequestType, ResponseType>\n  extends Writable\n  implements ServerWritableStream<RequestType, ResponseType> {\n  cancelled: boolean;\n  private trailingMetadata: Metadata;\n\n  constructor(\n    private call: Http2ServerCallStream<RequestType, ResponseType>,\n    public metadata: Metadata,\n    public serialize: Serialize<ResponseType>,\n    public request: RequestType\n  ) {\n    super({ objectMode: true });\n    this.cancelled = false;\n    this.trailingMetadata = new Metadata();\n    this.call.setupSurfaceCall(this);\n\n    this.on('error', (err) => {\n      this.call.sendError(err);\n      this.end();\n    });\n  }\n\n  getPeer(): string {\n    return this.call.getPeer();\n  }\n\n  sendMetadata(responseMetadata: Metadata): void {\n    this.call.sendMetadata(responseMetadata);\n  }\n\n  getDeadline(): Deadline {\n    return this.call.getDeadline();\n  }\n\n  _write(\n    chunk: ResponseType,\n    encoding: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback: (...args: any[]) => void\n  ) {\n    try {\n      const response = this.call.serializeMessage(chunk);\n\n      if (!this.call.write(response)) {\n        this.call.once('drain', callback);\n        return;\n      }\n    } catch (err) {\n      err.code = Status.INTERNAL;\n      this.emit('error', err);\n    }\n\n    callback();\n  }\n\n  _final(callback: Function): void {\n    this.call.sendStatus({\n      code: Status.OK,\n      details: 'OK',\n      metadata: this.trailingMetadata,\n    });\n    callback(null);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  end(metadata?: any) {\n    if (metadata) {\n      this.trailingMetadata = metadata;\n    }\n\n    return super.end();\n  }\n}\n\nexport class ServerDuplexStreamImpl<RequestType, ResponseType>\n  extends Duplex\n  implements ServerDuplexStream<RequestType, ResponseType> {\n  cancelled: boolean;\n  private trailingMetadata: Metadata;\n\n  constructor(\n    private call: Http2ServerCallStream<RequestType, ResponseType>,\n    public metadata: Metadata,\n    public serialize: Serialize<ResponseType>,\n    public deserialize: Deserialize<RequestType>,\n    encoding: string\n  ) {\n    super({ objectMode: true });\n    this.cancelled = false;\n    this.trailingMetadata = new Metadata();\n    this.call.setupSurfaceCall(this);\n    this.call.setupReadable(this, encoding);\n\n    this.on('error', (err) => {\n      this.call.sendError(err);\n      this.end();\n    });\n  }\n\n  getPeer(): string {\n    return this.call.getPeer();\n  }\n\n  sendMetadata(responseMetadata: Metadata): void {\n    this.call.sendMetadata(responseMetadata);\n  }\n\n  getDeadline(): Deadline {\n    return this.call.getDeadline();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  end(metadata?: any) {\n    if (metadata) {\n      this.trailingMetadata = metadata;\n    }\n\n    return super.end();\n  }\n}\n\nServerDuplexStreamImpl.prototype._read =\n  ServerReadableStreamImpl.prototype._read;\nServerDuplexStreamImpl.prototype._write =\n  ServerWritableStreamImpl.prototype._write;\nServerDuplexStreamImpl.prototype._final =\n  ServerWritableStreamImpl.prototype._final;\n\n// Unary response callback signature.\nexport type sendUnaryData<ResponseType> = (\n  error: ServerErrorResponse | ServerStatusResponse | null,\n  value?: ResponseType | null,\n  trailer?: Metadata,\n  flags?: number\n) => void;\n\n// User provided handler for unary calls.\nexport type handleUnaryCall<RequestType, ResponseType> = (\n  call: ServerUnaryCall<RequestType, ResponseType>,\n  callback: sendUnaryData<ResponseType>\n) => void;\n\n// User provided handler for client streaming calls.\nexport type handleClientStreamingCall<RequestType, ResponseType> = (\n  call: ServerReadableStream<RequestType, ResponseType>,\n  callback: sendUnaryData<ResponseType>\n) => void;\n\n// User provided handler for server streaming calls.\nexport type handleServerStreamingCall<RequestType, ResponseType> = (\n  call: ServerWritableStream<RequestType, ResponseType>\n) => void;\n\n// User provided handler for bidirectional streaming calls.\nexport type handleBidiStreamingCall<RequestType, ResponseType> = (\n  call: ServerDuplexStream<RequestType, ResponseType>\n) => void;\n\nexport type HandleCall<RequestType, ResponseType> =\n  | handleUnaryCall<RequestType, ResponseType>\n  | handleClientStreamingCall<RequestType, ResponseType>\n  | handleServerStreamingCall<RequestType, ResponseType>\n  | handleBidiStreamingCall<RequestType, ResponseType>;\n\nexport interface UnaryHandler<RequestType, ResponseType> {\n  func: handleUnaryCall<RequestType, ResponseType>;\n  serialize: Serialize<ResponseType>;\n  deserialize: Deserialize<RequestType>;\n  type: HandlerType;\n  path: string;\n}\n\nexport interface ClientStreamingHandler<RequestType, ResponseType> {\n  func: handleClientStreamingCall<RequestType, ResponseType>;\n  serialize: Serialize<ResponseType>;\n  deserialize: Deserialize<RequestType>;\n  type: HandlerType;\n  path: string;\n}\n\nexport interface ServerStreamingHandler<RequestType, ResponseType> {\n  func: handleServerStreamingCall<RequestType, ResponseType>;\n  serialize: Serialize<ResponseType>;\n  deserialize: Deserialize<RequestType>;\n  type: HandlerType;\n  path: string;\n}\n\nexport interface BidiStreamingHandler<RequestType, ResponseType> {\n  func: handleBidiStreamingCall<RequestType, ResponseType>;\n  serialize: Serialize<ResponseType>;\n  deserialize: Deserialize<RequestType>;\n  type: HandlerType;\n  path: string;\n}\n\nexport type Handler<RequestType, ResponseType> =\n  | UnaryHandler<RequestType, ResponseType>\n  | ClientStreamingHandler<RequestType, ResponseType>\n  | ServerStreamingHandler<RequestType, ResponseType>\n  | BidiStreamingHandler<RequestType, ResponseType>;\n\nexport type HandlerType = 'bidi' | 'clientStream' | 'serverStream' | 'unary';\n\n// Internal class that wraps the HTTP2 request.\nexport class Http2ServerCallStream<\n  RequestType,\n  ResponseType\n> extends EventEmitter {\n  cancelled = false;\n  deadlineTimer: NodeJS.Timer = setTimeout(() => {}, 0);\n  private deadline: Deadline = Infinity;\n  private wantTrailers = false;\n  private metadataSent = false;\n  private canPush = false;\n  private isPushPending = false;\n  private bufferedMessages: Array<Buffer | null> = [];\n  private messagesToPush: Array<RequestType | null> = [];\n  private maxSendMessageSize: number = DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n  private maxReceiveMessageSize: number = DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n\n  constructor(\n    private stream: http2.ServerHttp2Stream,\n    private handler: Handler<RequestType, ResponseType>,\n    private options: ChannelOptions\n  ) {\n    super();\n\n    this.stream.once('error', (err: ServerErrorResponse) => {\n      /* We need an error handler to avoid uncaught error event exceptions, but\n       * there is nothing we can reasonably do here. Any error event should\n       * have a corresponding close event, which handles emitting the cancelled\n       * event. And the stream is now in a bad state, so we can't reasonably\n       * expect to be able to send an error over it. */\n    });\n\n    this.stream.once('close', () => {\n      trace(\n        'Request to method ' +\n          this.handler?.path +\n          ' stream closed with rstCode ' +\n          this.stream.rstCode\n      );\n      this.cancelled = true;\n      this.emit('cancelled', 'cancelled');\n      this.emit('streamEnd', false);\n      this.sendStatus({code: Status.CANCELLED, details: 'Cancelled by client', metadata: new Metadata()});\n    });\n\n    this.stream.on('drain', () => {\n      this.emit('drain');\n    });\n\n    if ('grpc.max_send_message_length' in options) {\n      this.maxSendMessageSize = options['grpc.max_send_message_length']!;\n    }\n    if ('grpc.max_receive_message_length' in options) {\n      this.maxReceiveMessageSize = options['grpc.max_receive_message_length']!;\n    }\n\n    // Clear noop timer\n    clearTimeout(this.deadlineTimer);\n  }\n\n  private checkCancelled(): boolean {\n    /* In some cases the stream can become destroyed before the close event\n     * fires. That creates a race condition that this check works around */\n    if (this.stream.destroyed || this.stream.closed) {\n      this.cancelled = true;\n    }\n    return this.cancelled;\n  }\n\n  private getDecompressedMessage(message: Buffer, encoding: string) {\n    switch (encoding) {\n      case 'deflate': {\n        return new Promise<Buffer | undefined>((resolve, reject) => {\n          zlib.inflate(message.slice(5), (err, output) => {\n            if (err) {\n              this.sendError({\n                code: Status.INTERNAL,\n                details: `Received \"grpc-encoding\" header \"${encoding}\" but ${encoding} decompression failed`,\n              });\n              resolve();\n            } else {\n              resolve(output);\n            }\n          });\n        });\n      }\n  \n      case 'gzip': {\n        return new Promise<Buffer | undefined>((resolve, reject) => {\n          zlib.unzip(message.slice(5), (err, output) => {\n            if (err) {\n              this.sendError({\n                code: Status.INTERNAL,\n                details: `Received \"grpc-encoding\" header \"${encoding}\" but ${encoding} decompression failed`,\n              });\n              resolve();\n            } else {\n              resolve(output);\n            }\n          });\n        });\n      }\n\n      case 'identity': {\n        return Promise.resolve(message.slice(5));\n      }\n  \n      default: {\n        this.sendError({\n          code: Status.UNIMPLEMENTED,\n          details: `Received message compressed with unsupported encoding \"${encoding}\"`,\n        });\n        return Promise.resolve();\n      }\n    }\n  }\n\n  sendMetadata(customMetadata?: Metadata) {\n    if (this.checkCancelled()) {\n      return;\n    }\n\n    if (this.metadataSent) {\n      return;\n    }\n\n    this.metadataSent = true;\n    const custom = customMetadata ? customMetadata.toHttp2Headers() : null;\n    // TODO(cjihrig): Include compression headers.\n    const headers = Object.assign({}, defaultResponseHeaders, custom);\n    this.stream.respond(headers, defaultResponseOptions);\n  }\n\n  receiveMetadata(headers: http2.IncomingHttpHeaders) {\n    const metadata = Metadata.fromHttp2Headers(headers);\n\n    // TODO(cjihrig): Receive compression metadata.\n\n    const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);\n\n    if (timeoutHeader.length > 0) {\n      const match = timeoutHeader[0].toString().match(DEADLINE_REGEX);\n\n      if (match === null) {\n        const err = new Error('Invalid deadline') as ServerErrorResponse;\n        err.code = Status.OUT_OF_RANGE;\n        this.sendError(err);\n        return metadata;\n      }\n\n      const timeout = (+match[1] * deadlineUnitsToMs[match[2]]) | 0;\n\n      const now = new Date();\n      this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);\n      this.deadlineTimer = setTimeout(handleExpiredDeadline, timeout, this);\n      metadata.remove(GRPC_TIMEOUT_HEADER);\n    }\n\n    // Remove several headers that should not be propagated to the application\n    metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);\n    metadata.remove(http2.constants.HTTP2_HEADER_TE);\n    metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);\n    metadata.remove('grpc-accept-encoding');\n\n    return metadata;\n  }\n\n  receiveUnaryMessage(encoding: string): Promise<RequestType> {\n    return new Promise((resolve, reject) => {\n      const stream = this.stream;\n      const chunks: Buffer[] = [];\n      let totalLength = 0;\n\n      stream.on('data', (data: Buffer) => {\n        chunks.push(data);\n        totalLength += data.byteLength;\n      });\n\n      stream.once('end', async () => {\n        try {\n          const requestBytes = Buffer.concat(chunks, totalLength);\n          if (\n            this.maxReceiveMessageSize !== -1 &&\n            requestBytes.length > this.maxReceiveMessageSize\n          ) {\n            this.sendError({\n              code: Status.RESOURCE_EXHAUSTED,\n              details: `Received message larger than max (${requestBytes.length} vs. ${this.maxReceiveMessageSize})`,\n            });\n            resolve();\n          }\n\n          this.emit('receiveMessage');\n\n          const compressed = requestBytes.readUInt8(0) === 1;\n          const compressedMessageEncoding = compressed ? encoding : 'identity';\n          const decompressedMessage = await this.getDecompressedMessage(requestBytes, compressedMessageEncoding);\n\n          // Encountered an error with decompression; it'll already have been propogated back\n          // Just return early\n          if (!decompressedMessage) {\n            resolve();\n          }\n          else {\n            resolve(this.deserializeMessage(decompressedMessage));\n          }\n        } catch (err) {\n          err.code = Status.INTERNAL;\n          this.sendError(err);\n          resolve();\n        }\n      });\n    });\n  }\n\n  serializeMessage(value: ResponseType) {\n    const messageBuffer = this.handler.serialize(value);\n\n    // TODO(cjihrig): Call compression aware serializeMessage().\n    const byteLength = messageBuffer.byteLength;\n    const output = Buffer.allocUnsafe(byteLength + 5);\n    output.writeUInt8(0, 0);\n    output.writeUInt32BE(byteLength, 1);\n    messageBuffer.copy(output, 5);\n    return output;\n  }\n\n  deserializeMessage(bytes: Buffer) {\n    return this.handler.deserialize(bytes);\n  }\n\n  async sendUnaryMessage(\n    err: ServerErrorResponse | ServerStatusResponse | null,\n    value?: ResponseType | null,\n    metadata?: Metadata,\n    flags?: number\n  ) {\n    if (this.checkCancelled()) {\n      return;\n    }\n    if (!metadata) {\n      metadata = new Metadata();\n    }\n\n    if (err) {\n      if (!Object.prototype.hasOwnProperty.call(err, 'metadata')) {\n        err.metadata = metadata;\n      }\n      this.sendError(err);\n      return;\n    }\n\n    try {\n      const response = this.serializeMessage(value!);\n\n      this.write(response);\n      this.sendStatus({ code: Status.OK, details: 'OK', metadata });\n    } catch (err) {\n      err.code = Status.INTERNAL;\n      this.sendError(err);\n    }\n  }\n\n  sendStatus(statusObj: StatusObject) {\n    this.emit('callEnd', statusObj.code);\n    this.emit('streamEnd', statusObj.code === Status.OK);\n    if (this.checkCancelled()) {\n      return;\n    }\n\n    trace(\n      'Request to method ' +\n        this.handler?.path +\n        ' ended with status code: ' +\n        Status[statusObj.code] +\n        ' details: ' +\n        statusObj.details\n    );\n\n    clearTimeout(this.deadlineTimer);\n\n    if (!this.wantTrailers) {\n      this.wantTrailers = true;\n      this.stream.once('wantTrailers', () => {\n        const trailersToSend = Object.assign(\n          {\n            [GRPC_STATUS_HEADER]: statusObj.code,\n            [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details as string),\n          },\n          statusObj.metadata.toHttp2Headers()\n        );\n\n        this.stream.sendTrailers(trailersToSend);\n      });\n      this.sendMetadata();\n      this.stream.end();\n    }\n  }\n\n  sendError(error: ServerErrorResponse | ServerStatusResponse) {\n    const status: StatusObject = {\n      code: Status.UNKNOWN,\n      details: 'message' in error ? error.message : 'Unknown Error',\n      metadata:\n        'metadata' in error && error.metadata !== undefined\n          ? error.metadata\n          : new Metadata(),\n    };\n\n    if (\n      'code' in error &&\n      typeof error.code === 'number' &&\n      Number.isInteger(error.code)\n    ) {\n      status.code = error.code;\n\n      if ('details' in error && typeof error.details === 'string') {\n        status.details = error.details!;\n      }\n    }\n\n    this.sendStatus(status);\n  }\n\n  write(chunk: Buffer) {\n    if (this.checkCancelled()) {\n      return;\n    }\n\n    if (\n      this.maxSendMessageSize !== -1 &&\n      chunk.length > this.maxSendMessageSize\n    ) {\n      this.sendError({\n        code: Status.RESOURCE_EXHAUSTED,\n        details: `Sent message larger than max (${chunk.length} vs. ${this.maxSendMessageSize})`,\n      });\n      return;\n    }\n\n    this.sendMetadata();\n    this.emit('sendMessage');\n    return this.stream.write(chunk);\n  }\n\n  resume() {\n    this.stream.resume();\n  }\n\n  setupSurfaceCall(call: ServerSurfaceCall) {\n    this.once('cancelled', (reason) => {\n      call.cancelled = true;\n      call.emit('cancelled', reason);\n    });\n  }\n\n  setupReadable(\n    readable:\n      | ServerReadableStream<RequestType, ResponseType>\n      | ServerDuplexStream<RequestType, ResponseType>,\n    encoding: string\n  ) {\n    const decoder = new StreamDecoder();\n\n    let readsDone = false;\n\n    let pendingMessageProcessing = false;\n\n    let pushedEnd = false;\n\n    const maybePushEnd = () => {\n      if (!pushedEnd && readsDone && !pendingMessageProcessing) {\n        pushedEnd = true;\n        this.pushOrBufferMessage(readable, null);\n      }\n    }\n\n    this.stream.on('data', async (data: Buffer) => {\n      const messages = decoder.write(data);\n\n      pendingMessageProcessing = true;\n      this.stream.pause();\n      for (const message of messages) {\n        if (\n          this.maxReceiveMessageSize !== -1 &&\n          message.length > this.maxReceiveMessageSize\n        ) {\n          this.sendError({\n            code: Status.RESOURCE_EXHAUSTED,\n            details: `Received message larger than max (${message.length} vs. ${this.maxReceiveMessageSize})`,\n          });\n          return;\n        }\n        this.emit('receiveMessage');\n\n        const compressed = message.readUInt8(0) === 1;\n        const compressedMessageEncoding = compressed ? encoding : 'identity';\n        const decompressedMessage = await this.getDecompressedMessage(message, compressedMessageEncoding);\n\n        // Encountered an error with decompression; it'll already have been propogated back\n        // Just return early\n        if (!decompressedMessage) return;\n         \n        this.pushOrBufferMessage(readable, decompressedMessage);\n      }\n      pendingMessageProcessing = false;\n      this.stream.resume();\n      maybePushEnd();\n    });\n\n    this.stream.once('end', () => {\n      readsDone = true;\n      maybePushEnd();\n    });\n  }\n\n  consumeUnpushedMessages(\n    readable:\n      | ServerReadableStream<RequestType, ResponseType>\n      | ServerDuplexStream<RequestType, ResponseType>\n  ): boolean {\n    this.canPush = true;\n\n    while (this.messagesToPush.length > 0) {\n      const nextMessage = this.messagesToPush.shift();\n      const canPush = readable.push(nextMessage);\n\n      if (nextMessage === null || canPush === false) {\n        this.canPush = false;\n        break;\n      }\n    }\n\n    return this.canPush;\n  }\n\n  private pushOrBufferMessage(\n    readable:\n      | ServerReadableStream<RequestType, ResponseType>\n      | ServerDuplexStream<RequestType, ResponseType>,\n    messageBytes: Buffer | null\n  ): void {\n    if (this.isPushPending) {\n      this.bufferedMessages.push(messageBytes);\n    } else {\n      this.pushMessage(readable, messageBytes);\n    }\n  }\n\n  private async pushMessage(\n    readable:\n      | ServerReadableStream<RequestType, ResponseType>\n      | ServerDuplexStream<RequestType, ResponseType>,\n    messageBytes: Buffer | null\n  ) {\n    if (messageBytes === null) {\n      trace('Received end of stream');\n      if (this.canPush) {\n        readable.push(null);\n      } else {\n        this.messagesToPush.push(null);\n      }\n\n      return;\n    }\n\n    trace('Received message of length ' + messageBytes.length);\n\n    this.isPushPending = true;\n\n    try {\n      const deserialized = await this.deserializeMessage(messageBytes);\n\n      if (this.canPush) {\n        if (!readable.push(deserialized)) {\n          this.canPush = false;\n          this.stream.pause();\n        }\n      } else {\n        this.messagesToPush.push(deserialized);\n      }\n    } catch (error) {\n      // Ignore any remaining messages when errors occur.\n      this.bufferedMessages.length = 0;\n\n      if (\n        !(\n          'code' in error &&\n          typeof error.code === 'number' &&\n          Number.isInteger(error.code) &&\n          error.code >= Status.OK &&\n          error.code <= Status.UNAUTHENTICATED\n        )\n      ) {\n        // The error code is not a valid gRPC code so its being overwritten.\n        error.code = Status.INTERNAL;\n      }\n\n      readable.emit('error', error);\n    }\n\n    this.isPushPending = false;\n\n    if (this.bufferedMessages.length > 0) {\n      this.pushMessage(\n        readable,\n        this.bufferedMessages.shift() as Buffer | null\n      );\n    }\n  }\n\n  getPeer(): string {\n    const socket = this.stream.session.socket;\n    if (socket.remoteAddress) {\n      if (socket.remotePort) {\n        return `${socket.remoteAddress}:${socket.remotePort}`;\n      } else {\n        return socket.remoteAddress;\n      }\n    } else {\n      return 'unknown';\n    }\n  }\n\n  getDeadline(): Deadline {\n    return this.deadline;\n  }\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype UntypedServerCall = Http2ServerCallStream<any, any>;\n\nfunction handleExpiredDeadline(call: UntypedServerCall) {\n  const err = new Error('Deadline exceeded') as ServerErrorResponse;\n  err.code = Status.DEADLINE_EXCEEDED;\n\n  call.sendError(err);\n  call.cancelled = true;\n  call.emit('cancelled', 'deadline');\n}\n"]},"metadata":{},"sourceType":"script"}